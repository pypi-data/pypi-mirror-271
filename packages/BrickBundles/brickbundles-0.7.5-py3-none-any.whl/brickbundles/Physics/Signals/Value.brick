Value:
    .doc: """
Base for different types of values, e.g. for use in ValueOutputSignal
"""




RealValue is Value:
    .doc: """
Base for Values that are real numbers
"""
    value is Real


AngleValue is RealValue:
    static fn create(value: Real) -> AngleValue
AngularVelocityValue is RealValue:
    static fn create(value: Real) -> AngularVelocityValue
DistanceValue is RealValue:
    static fn create(value: Real) -> DistanceValue
ForceValue is RealValue:
    static fn create(value: Real) -> ForceValue
LinearVelocityValue is RealValue:
    static fn create(value: Real) -> LinearVelocityValue
TorqueValue is RealValue:
    static fn create(value: Real) -> TorqueValue




Vec3Value is Value:
    .doc: """
Base for Values that are real Vec3s
"""
    value is Math.Vec3

DirectionalAccelerationValue is Vec3Value:
    static fn create(value: Math.Vec3) -> DirectionalAccelerationValue
DirectionalAngularAccelerationValue is Vec3Value:
    static fn create(value: Math.Vec3) -> DirectionalAngularAccelerationValue
DirectionalAngularVelocityValue is Vec3Value:
    static fn create(value: Math.Vec3) -> DirectionalAngularVelocityValue
DirectionalForceValue is Vec3Value:
    static fn create(value: Math.Vec3) -> DirectionalForceValue
DirectionalTorqueValue is Vec3Value:
    static fn create(value: Math.Vec3) -> DirectionalTorqueValue
DirectionalVelocityValue is Vec3Value:
    static fn create(value: Math.Vec3) -> DirectionalVelocityValue
PositionValue is Vec3Value:
    static fn create(value: Math.Vec3) -> PositionValue
RPYvalue is Vec3Value:
    static fn create(value: Math.Vec3) -> RPYvalue
