ValueOutputSignal is OutputSignal:
    value is Value
    static fn create(v: Value, source: Output) -> ValueOutputSignal
    static fn fromAngle(v: Real, source: Output) -> ValueOutputSignal
    static fn fromAngularVelocity(v: Real, source: Output) -> ValueOutputSignal
    static fn fromDistance(v: Real, source: Output) -> ValueOutputSignal
    static fn fromForce(v: Real, source: Output) -> ValueOutputSignal
    static fn fromLinearVelocity(v: Real, source: Output) -> ValueOutputSignal
    static fn fromTorque(v: Real, source: Output) -> ValueOutputSignal
    static fn fromDirectionalAcceleration(v: Math.Vec3, source: Output) -> ValueOutputSignal
    static fn fromDirectionalAngularAcceleration(v: Math.Vec3, source: Output) -> ValueOutputSignal
    static fn fromDirectionalAngularVelocity(v: Math.Vec3, source: Output) -> ValueOutputSignal
    static fn fromDirectionalForce(v: Math.Vec3, source: Output) -> ValueOutputSignal
    static fn fromDirectionalTorque(v: Math.Vec3, source: Output) -> ValueOutputSignal
    static fn fromDirectionalVelocity(v: Math.Vec3, source: Output) -> ValueOutputSignal
    static fn fromPosition(v: Math.Vec3, source: Output) -> ValueOutputSignal
    static fn fromRPY(v: Math.Vec3, source: Output) -> ValueOutputSignal

    fn isReal() -> Bool
    fn asReal() -> Real
    fn asVec3() -> Math.Vec3
    fn asAngle() -> Real
    fn asAngularVelocity() -> Real
    fn asDistance() -> Real
    fn asForce() -> Real
    fn asLinearVelocity() -> Real
    fn asTorque() -> Real
    fn asDirectionalAcceleration() -> Math.Vec3
    fn asDirectionalAngularAcceleration() -> Math.Vec3
    fn asDirectionalAngularVelocity() -> Math.Vec3
    fn asDirectionalForce() -> Math.Vec3
    fn asDirectionalTorque() -> Math.Vec3
    fn asDirectionalVelocity() -> Math.Vec3
    fn asPosition() -> Math.Vec3
    fn asRPY() -> Math.Vec3

