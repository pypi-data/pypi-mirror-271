# Auto generated code by ssc_gen
# WARNING: Any manual changes made to this file will be lost when this
# is run again. Do not edit this file unless you know what you are doing.

from __future__ import annotations  # python 3.7, 3.8 comp
import re
from typing import Any, Union

from parsel import Selector, SelectorList

_T_DICT_ITEM = dict[str, Union[str, list[str]]]
_T_LIST_ITEMS = list[dict[str, Union[str, list[str]]]]


class _BaseStructParser:
    def __init__(self, document: str):
        self.__raw__ = document
        self.__selector__ = Selector(document)
        self._cached_result: Union[_T_DICT_ITEM, _T_LIST_ITEMS] = {}

    def _pre_validate(self, document: Selector) -> None:
        # pre validate entrypoint, contain assert expressions
        pass

    def parse(self):
        """run parser"""
        self._pre_validate(self.__selector__)
        self._start_parse()
        return self

    def view(self) -> Union[_T_DICT_ITEM, _T_LIST_ITEMS]:
        """get parsed values"""
        return self._cached_result

    def _start_parse(self):
        """parse logic entrypoint"""
        pass


class OngoingView(_BaseStructParser):
    """Get all available ongoings from main page

        GET https://animego.pro/ongoing

        OngoingView view() item signature:

    {
        "url": "String",
        "title": "String",
        "thumbnail": "String"
    }
    """

    def __init__(self, document: str):
        super().__init__(document)
        self._cached_result: _T_LIST_ITEMS = []

    def _part_document(self) -> SelectorList:
        doc = self.__selector__
        var_0 = doc
        var_1 = var_0.css(".card")
        return var_1

    def _start_parse(self):
        self._cached_result.clear()
        for part in self._part_document():
            self._cached_result.append(
                {
                    "url": self._parse_url(part),
                    "title": self._parse_title(part),
                    "thumbnail": self._parse_thumbnail(part),
                }
            )

    def view(self) -> _T_LIST_ITEMS:
        return self._cached_result

    def _parse_url(self, doc: Selector):
        """ongoing page"""

        var_0 = doc
        var_1 = var_0.css(".card .card__title > a")
        var_2 = var_1.attrib["href"]
        return var_2

    def _parse_title(self, doc: Selector):
        var_0 = doc
        var_1 = var_0.css(".card .card__title > a")
        var_2 = var_1.css("::text").get()
        return var_2

    def _parse_thumbnail(self, doc: Selector):
        """maybe returns `animego-online.org` src link - path this"""

        var_0 = doc
        var_1 = var_0.css(".card img")
        var_2 = var_1.attrib["src"]
        var_3 = var_2.lstrip("https://animego-online.org")
        var_4 = "https://animego.pro{}".format(var_3)
        return var_4


class SearchView(_BaseStructParser):
    """Get all search results by query

        POST https://animego.pro
        do=search&subaction=search&story=QUERY

        SearchView view() item signature:

    {
        "url": "String",
        "title": "String",
        "thumbnail": "String"
    }
    """

    def __init__(self, document: str):
        super().__init__(document)
        self._cached_result: _T_LIST_ITEMS = []

    def _part_document(self) -> SelectorList:
        doc = self.__selector__
        var_0 = doc
        var_1 = var_0.css(".card")
        return var_1

    def _start_parse(self):
        self._cached_result.clear()
        for part in self._part_document():
            self._cached_result.append(
                {
                    "url": self._parse_url(part),
                    "title": self._parse_title(part),
                    "thumbnail": self._parse_thumbnail(part),
                }
            )

    def view(self) -> _T_LIST_ITEMS:
        return self._cached_result

    def _parse_url(self, doc: Selector):
        """ongoing page"""

        var_0 = doc
        var_1 = var_0.css(".card .card__title > a")
        var_2 = var_1.attrib["href"]
        return var_2

    def _parse_title(self, doc: Selector):
        var_0 = doc
        var_1 = var_0.css(".card .card__title > a")
        var_2 = var_1.css("::text").get()
        return var_2

    def _parse_thumbnail(self, doc: Selector):
        """maybe returns `animego-online.org` src link - path this"""

        var_0 = doc
        var_1 = var_0.css(".card img")
        var_2 = var_1.attrib["src"]
        var_3 = var_2.lstrip("https://animego-online.org")
        var_4 = "https://animego.pro{}".format(var_3)
        return var_4


class AnimeView(_BaseStructParser):
    """Anime page information. anime path contains in SearchView.url or Ongoing.url

        GET https://animego.pro/<ANIME_PATH>

        EXAMPLE:

            GET https://animego.pro/3374-serial-experiments-lain.html

        AnimeView view() item signature:

    {
        "title": "String",
        "description": "Array['String']",
        "thumbnail": "String",
        "news_id": "String"
    }
    """

    def __init__(self, document: str):
        super().__init__(document)
        self._cached_result: _T_DICT_ITEM = {}

    def _start_parse(self):
        self._cached_result.clear()
        self._cached_result["title"] = self._parse_title(self.__selector__)
        self._cached_result["description"] = self._parse_description(self.__selector__)
        self._cached_result["thumbnail"] = self._parse_thumbnail(self.__selector__)
        self._cached_result["news_id"] = self._parse_news_id(self.__selector__)

    def view(self) -> _T_DICT_ITEM:
        return self._cached_result

    def _parse_title(self, doc: Selector):
        var_0 = doc
        var_1 = var_0.css(".page__header h1")
        var_2 = var_1.css("::text").get()
        return var_2

    def _parse_description(self, doc: Selector):
        var_0 = doc
        var_1 = var_0.css(".clearfix")
        var_2 = var_1.css("::text").getall()
        var_3 = " ".join(var_2)
        return var_3

    def _parse_thumbnail(self, doc: Selector):
        """maybe returns `animego-online.org` src link - path this"""

        var_0 = doc
        var_1 = var_0.css(".pmovie__poster > img")
        var_2 = var_1.attrib["src"]
        var_3 = var_2.lstrip("https://animego-online.org")
        var_4 = "https://animego.pro{}".format(var_3)
        return var_4

    def _parse_news_id(self, doc: Selector):
        """id required for next requests (for EpisodesView)"""

        var_0 = doc
        var_1 = var_0.css("#kodik_player_ajax")
        var_2 = var_1.attrib["data-news_id"]
        return var_2


class EpisodesView(_BaseStructParser):
    """Representation dubbers, and video url data

        Prepare:
          1. get news_id from Anime object
          2. POST 'https://animego.pro/engine/ajax/controller.php?mod=kodik_playlist_ajax'
            news_id=<AnimeView.news_id>&action=load_player
          3. send request to /serial/ link, DROP param only_translations
        EXAMPLE:

            # SOURCE:
                https://animego.pro/6240-loop-7-kaime-no-akuyaku-reijou-wa-moto-tekikoku-de-jiyuukimama-na-hanayome-seikatsu-o-mankitsu-suru.html

            POST https://animego.pro/engine/ajax/controller.php?mod=kodik_playlist_ajax
            news_id=6240&action=load_player

        EpisodesView view() item signature:

    {
        "value": "String",
        "id": "String",
        "media_id": "String",
        "media_hash": "String",
        "media_type": "String",
        "title": "String",
        "episode_count": "String"
    }
    """

    def __init__(self, document: str):
        super().__init__(document)
        self._cached_result: _T_LIST_ITEMS = []

    def _part_document(self) -> SelectorList:
        doc = self.__selector__
        var_0 = doc
        var_1 = var_0.css(".serial-translations-box > select > option")
        return var_1

    def _start_parse(self):
        self._cached_result.clear()
        for part in self._part_document():
            self._cached_result.append(
                {
                    "value": self._parse_value(part),
                    "id": self._parse_id(part),
                    "media_id": self._parse_media_id(part),
                    "media_hash": self._parse_media_hash(part),
                    "media_type": self._parse_media_type(part),
                    "title": self._parse_title(part),
                    "episode_count": self._parse_episode_count(part),
                }
            )

    def view(self) -> _T_LIST_ITEMS:
        return self._cached_result

    def _parse_value(self, doc: Selector):
        var_0 = doc
        var_1 = var_0.attrib["value"]
        return var_1

    def _parse_id(self, doc: Selector):
        var_0 = doc
        var_1 = var_0.attrib["data-id"]
        return var_1

    def _parse_media_id(self, doc: Selector):
        """video id"""

        var_0 = doc
        var_1 = var_0.attrib["data-media-id"]
        return var_1

    def _parse_media_hash(self, doc: Selector):
        """video hash"""

        var_0 = doc
        var_1 = var_0.attrib["data-media-hash"]
        return var_1

    def _parse_media_type(self, doc: Selector):
        """video type"""

        var_0 = doc
        var_1 = var_0.attrib["data-media-type"]
        return var_1

    def _parse_title(self, doc: Selector):
        """dubber name"""

        var_0 = doc
        var_1 = var_0.attrib["data-title"]
        return var_1

    def _parse_episode_count(self, doc: Selector):
        """episodes count for dubber"""

        var_0 = doc
        var_1 = var_0.attrib["data-episode-count"]
        return var_1


class FirstPlayerUrlView(_BaseStructParser):
    """Prepare:
          1. get news_id from Anime object
          2. POST 'https://animego.pro/engine/ajax/controller.php?mod=kodik_playlist_ajax'
            news_id=<AnimeView.news_id>&action=load_player

        EXAMPLE:

            # SOURCE:
                https://animego.pro/6240-loop-7-kaime-no-akuyaku-reijou-wa-moto-tekikoku-de-jiyuukimama-na-hanayome-seikatsu-o-mankitsu-suru.html

            POST https://animego.pro/engine/ajax/controller.php?mod=kodik_playlist_ajax
            news_id=6240&action=load_player

        FirstPlayerUrlView view() item signature:

    {
        "url": "String"
    }
    """

    def __init__(self, document: str):
        super().__init__(document)
        self._cached_result: _T_DICT_ITEM = {}

    def _start_parse(self):
        self._cached_result.clear()
        self._cached_result["url"] = self._parse_url(self.__selector__)

    def view(self) -> _T_DICT_ITEM:
        return self._cached_result

    def _parse_url(self, doc: Selector):
        """return first player url. Required for extract episodes"

            Eg LINK signature:
                      data-id vvvv       data-hash                                                          dubber_id
                              vvvv       vvvvv                                                                vvvv
        '//kodik.info/serial/56520/fd227df3f52d477c793a58f4c99ee4f2/720p?translations=false&only_translations=28220'

        """

        var_0 = doc
        var_1 = var_0.css("#player_kodik > iframe")
        var_2 = var_1.attrib["src"]
        var_3 = "https:{}".format(var_2)
        return var_3


class SourceKodikView(_BaseStructParser):
    """extract videos from kodik serial path. this values helps create video player link

        Example:
             SERIAL, NOT SERIA path====vvvvv
            - GET 'https://kodik.info/serial/58496/d2a8737db86989de0863bac5c14ce18b/720p?translations=false&only_translations=1895'

        SourceKodikView view() item signature:

    {
        "value": "String",
        "id": "String",
        "hash": "String",
        "title": "String"
    }
    """

    def __init__(self, document: str):
        super().__init__(document)
        self._cached_result: _T_LIST_ITEMS = []

    def _part_document(self) -> SelectorList:
        doc = self.__selector__
        var_0 = doc
        var_1 = var_0.css(".series-options > div > option")
        return var_1

    def _start_parse(self):
        self._cached_result.clear()
        for part in self._part_document():
            self._cached_result.append(
                {
                    "value": self._parse_value(part),
                    "id": self._parse_id(part),
                    "hash": self._parse_hash(part),
                    "title": self._parse_title(part),
                }
            )

    def view(self) -> _T_LIST_ITEMS:
        return self._cached_result

    def _parse_value(self, doc: Selector):
        var_0 = doc
        var_1 = var_0.attrib["value"]
        return var_1

    def _parse_id(self, doc: Selector):
        var_0 = doc
        var_1 = var_0.attrib["data-id"]
        return var_1

    def _parse_hash(self, doc: Selector):
        var_0 = doc
        var_1 = var_0.attrib["data-hash"]
        return var_1

    def _parse_title(self, doc: Selector):
        var_0 = doc
        var_1 = var_0.attrib["data-title"]
        return var_1
