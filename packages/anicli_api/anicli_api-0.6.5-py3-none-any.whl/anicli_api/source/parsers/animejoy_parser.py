# Auto generated code by ssc_gen
# WARNING: Any manual changes made to this file will be lost when this
# is run again. Do not edit this file unless you know what you are doing.

from __future__ import annotations  # python 3.7, 3.8 comp
import re
from typing import Any, Union

from parsel import Selector, SelectorList

_T_DICT_ITEM = dict[str, Union[str, list[str]]]
_T_LIST_ITEMS = list[dict[str, Union[str, list[str]]]]


class _BaseStructParser:
    def __init__(self, document: str):
        self.__raw__ = document
        self.__selector__ = Selector(document)
        self._cached_result: Union[_T_DICT_ITEM, _T_LIST_ITEMS] = {}

    def _pre_validate(self, document: Selector) -> None:
        # pre validate entrypoint, contain assert expressions
        pass

    def parse(self):
        """run parser"""
        self._pre_validate(self.__selector__)
        self._start_parse()
        return self

    def view(self) -> Union[_T_DICT_ITEM, _T_LIST_ITEMS]:
        """get parsed values"""
        return self._cached_result

    def _start_parse(self):
        """parse logic entrypoint"""
        pass


class OngoingView(_BaseStructParser):
    """
        GET https://animejoy.ru

        OngoingView view() item signature:

    {
        "url": "String",
        "title": "String",
        "alt_title": "String",
        "thumbnail": "String"
    }
    """

    def __init__(self, document: str):
        super().__init__(document)
        self._cached_result: _T_LIST_ITEMS = []

    def _part_document(self) -> SelectorList:
        doc = self.__selector__
        var_0 = doc
        var_1 = var_0.css(".shortstory")
        return var_1

    def _start_parse(self):
        self._cached_result.clear()
        for part in self._part_document():
            self._cached_result.append(
                {
                    "url": self._parse_url(part),
                    "title": self._parse_title(part),
                    "alt_title": self._parse_alt_title(part),
                    "thumbnail": self._parse_thumbnail(part),
                }
            )

    def view(self) -> _T_LIST_ITEMS:
        return self._cached_result

    def _parse_url(self, doc: Selector):
        var_0 = doc
        var_1 = var_0.css(".ntitle > a")
        var_2 = var_1.attrib["href"]
        return var_2

    def _parse_title(self, doc: Selector):
        var_0 = doc
        var_1 = var_0.css(".ntitle > a")
        var_2 = var_1.css("::text").get()
        return var_2

    def _parse_alt_title(self, doc: Selector):
        var_0 = doc
        var_1 = var_0.css(".romanji")
        var_2 = var_1.css("::text").get()
        return var_2

    def _parse_thumbnail(self, doc: Selector):
        var_0 = doc
        var_1 = var_0.css(".fr-fil")
        var_2 = var_1.attrib["src"]
        var_3 = "https://animejoy.ru{}".format(var_2)
        return var_3


class SearchView(_BaseStructParser):
    """
        POST https://animejoy.ru/
        story=<QUERY>&do=search&subaction=search

        EXAMPLE:
            POST https://animejoy.ru
            story=LAIN&do=search&subaction=search

        SearchView view() item signature:

    {
        "title": "String",
        "alt_title": "String",
        "thumbnail": "String",
        "url": "String"
    }
    """

    def __init__(self, document: str):
        super().__init__(document)
        self._cached_result: _T_LIST_ITEMS = []

    def _pre_validate(self, doc: Selector) -> None:
        var_0 = doc
        var_1 = var_0.css("title")
        var_2 = var_1.css("::text").get()
        assert re.search(r"Поиск по сайту", var_2)
        return

    def _part_document(self) -> SelectorList:
        doc = self.__selector__
        var_0 = doc
        var_1 = var_0.css(".shortstory")
        return var_1

    def _start_parse(self):
        self._cached_result.clear()
        for part in self._part_document():
            self._cached_result.append(
                {
                    "title": self._parse_title(part),
                    "alt_title": self._parse_alt_title(part),
                    "thumbnail": self._parse_thumbnail(part),
                    "url": self._parse_url(part),
                }
            )

    def view(self) -> _T_LIST_ITEMS:
        return self._cached_result

    def _parse_title(self, doc: Selector):
        var_0 = doc
        var_1 = var_0.css(".ntitle > a")
        var_2 = var_1.css("::text").get()
        return var_2

    def _parse_alt_title(self, doc: Selector):
        var_0 = doc
        var_1 = var_0.css(".romanji")
        var_2 = var_1.css("::text").get()
        return var_2

    def _parse_thumbnail(self, doc: Selector):
        var_0 = doc
        var_1 = var_0.css(".fr-fil")
        var_2 = var_1.attrib["src"]
        return var_2

    def _parse_url(self, doc: Selector):
        var_0 = doc
        var_1 = var_0.css(".ntitle > a")
        var_2 = var_1.attrib["href"]
        var_3 = "https://animejoy.ru{}".format(var_2)
        return var_3


class AnimeView(_BaseStructParser):
    """
        GET https://animejoy.ru/<ANIME PATH>

        EXAMPLE:
            GET https://animejoy.ru/tv-serialy/2654-van-pis-1001-.html

        AnimeView view() item signature:

    {
        "title": "String",
        "alt_title": "String",
        "description": "String",
        "thumbnail": "String",
        "news_id": "String"
    }
    """

    def __init__(self, document: str):
        super().__init__(document)
        self._cached_result: _T_DICT_ITEM = {}

    def _pre_validate(self, doc: Selector) -> None:
        var_0 = doc
        var_1 = var_0.css("title")
        var_2 = var_1.css("::text").get()
        assert re.search(r"субтитры", var_2)
        return

    def _start_parse(self):
        self._cached_result.clear()
        self._cached_result["title"] = self._parse_title(self.__selector__)
        self._cached_result["alt_title"] = self._parse_alt_title(self.__selector__)
        self._cached_result["description"] = self._parse_description(self.__selector__)
        self._cached_result["thumbnail"] = self._parse_thumbnail(self.__selector__)
        self._cached_result["news_id"] = self._parse_news_id(self.__selector__)

    def view(self) -> _T_DICT_ITEM:
        return self._cached_result

    def _parse_title(self, doc: Selector):
        var_0 = doc
        var_1 = var_0.css(".ntitle")
        var_2 = var_1.css("::text").get()
        return var_2

    def _parse_alt_title(self, doc: Selector):
        var_0 = doc
        var_1 = var_0.css(".romanji")
        var_2 = var_1.css("::text").get()
        return var_2

    def _parse_description(self, doc: Selector):
        var_0 = doc
        var_1 = var_0.css(".pcdescrf p")
        var_2 = var_1.css("::text").getall()
        var_3 = " ".join(var_2)
        var_4 = var_3.lstrip("Описание:")
        var_5 = var_4.lstrip(" ")
        return var_5

    def _parse_thumbnail(self, doc: Selector):
        var_0 = doc
        var_1 = var_0.css(".fr-fil")
        var_2 = var_1.attrib["src"]
        var_3 = "https://animejoy.ru{}".format(var_2)
        return var_3

    def _parse_news_id(self, doc: Selector):
        """required for extract episodes and videos"""

        var_0 = doc
        var_1 = var_0.css("div.playlists-ajax")
        var_2 = var_1.attrib["data-news_id"]
        return var_2


class PlayerView(_BaseStructParser):
    """Represent player name and player id

        Prepare:
          1. get news_id from Anime class

          2.
            GET https://animejoy.ru/engine/ajax/playlists.php
            news_id={Anime.news_id}&xfield=playlist

          3. get json, get HTML by ["response"] key

          4. OPTIONAL: Unescape document

        EXAMPLE:
            GET https://animejoy.ru/engine/ajax/playlists.php
            news_id=2789&xfield=playlist

        PlayerView view() item signature:

    {
        "key": "String",
        "value": "String"
    }
    """

    def __init__(self, document: str):
        super().__init__(document)
        self._cached_result: _T_DICT_ITEM = {}

    def _pre_validate(self, doc: Selector) -> None:
        var_0 = doc
        assert var_0.css(".playlists-player > .playlists-lists ul > li").get()
        return

    def _part_document(self) -> SelectorList:
        doc = self.__selector__
        var_0 = doc
        var_1 = var_0.css(".playlists-player > .playlists-lists ul > li")
        return var_1

    def _start_parse(self):
        self._cached_result.clear()
        for part in self._part_document():
            self._cached_result[self._parse_key(part)] = self._parse_value(part)

    def view(self) -> _T_DICT_ITEM:
        return self._cached_result

    def _parse_key(self, doc: Selector):
        var_0 = doc
        var_1 = var_0.attrib["data-id"]
        return var_1

    def _parse_value(self, doc: Selector):
        var_0 = doc
        var_1 = var_0.css("::text").get()
        return var_1


class PlayerUrlsView(_BaseStructParser):
    """Represent player url and player id

        Prepare:
          1. get news_id from Anime class

          2.
          GET https://animejoy.ru/engine/ajax/playlists.php
          news_id={Anime.news_id}&xfield=playlist

          3. get json, get HTML by "response" key

          4. OPTIONAL: Unescape document

        EXAMPLE:
            https://animejoy.ru/engine/ajax/playlists.php
            news_id=2789&xfield=playlist

        PlayerUrlsView view() item signature:

    {
        "player_id": "String",
        "url": "String"
    }
    """

    def __init__(self, document: str):
        super().__init__(document)
        self._cached_result: _T_LIST_ITEMS = []

    def _pre_validate(self, doc: Selector) -> None:
        var_0 = doc
        assert var_0.css(".playlists-videos > .playlists-items ul > li").get()
        return

    def _part_document(self) -> SelectorList:
        doc = self.__selector__
        var_0 = doc
        var_1 = var_0.css(".playlists-videos > .playlists-items ul > li")
        return var_1

    def _start_parse(self):
        self._cached_result.clear()
        for part in self._part_document():
            self._cached_result.append(
                {
                    "player_id": self._parse_player_id(part),
                    "url": self._parse_url(part),
                }
            )

    def view(self) -> _T_LIST_ITEMS:
        return self._cached_result

    def _parse_player_id(self, doc: Selector):
        var_0 = doc
        var_1 = var_0.attrib["data-id"]
        return var_1

    def _parse_url(self, doc: Selector):
        var_0 = doc
        var_1 = var_0.attrib["data-file"]
        return var_1
