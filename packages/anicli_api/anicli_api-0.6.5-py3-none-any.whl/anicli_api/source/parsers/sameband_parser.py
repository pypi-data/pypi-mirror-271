# Auto generated code by ssc_gen
# WARNING: Any manual changes made to this file will be lost when this
# is run again. Do not edit this file unless you know what you are doing.

from __future__ import annotations  # python 3.7, 3.8 comp
import re
from typing import Any, Union

from parsel import Selector, SelectorList

_T_DICT_ITEM = dict[str, Union[str, list[str]]]
_T_LIST_ITEMS = list[dict[str, Union[str, list[str]]]]


class _BaseStructParser:
    def __init__(self, document: str):
        self.__raw__ = document
        self.__selector__ = Selector(document)
        self._cached_result: Union[_T_DICT_ITEM, _T_LIST_ITEMS] = {}

    def _pre_validate(self, document: Selector) -> None:
        # pre validate entrypoint, contain assert expressions
        pass

    def parse(self):
        """run parser"""
        self._pre_validate(self.__selector__)
        self._start_parse()
        return self

    def view(self) -> Union[_T_DICT_ITEM, _T_LIST_ITEMS]:
        """get parsed values"""
        return self._cached_result

    def _start_parse(self):
        """parse logic entrypoint"""
        pass


class OngoingView(_BaseStructParser):
    """GET https://sameband.studio
        OngoingView view() item signature:

    {
        "url": "String",
        "title": "String",
        "thumbnail": "String"
    }
    """

    def __init__(self, document: str):
        super().__init__(document)
        self._cached_result: _T_LIST_ITEMS = []

    def _part_document(self) -> SelectorList:
        doc = self.__selector__
        var_0 = doc
        var_1 = var_0.css(".container-fluid > .swiper")
        var_2 = var_1.css(".poster")
        return var_2

    def _start_parse(self):
        self._cached_result.clear()
        for part in self._part_document():
            self._cached_result.append(
                {
                    "url": self._parse_url(part),
                    "title": self._parse_title(part),
                    "thumbnail": self._parse_thumbnail(part),
                }
            )

    def view(self) -> _T_LIST_ITEMS:
        return self._cached_result

    def _parse_url(self, doc: Selector):
        var_0 = doc
        var_1 = var_0.css("a")
        var_2 = var_1.attrib["href"]
        return var_2

    def _parse_title(self, doc: Selector):
        var_0 = doc
        var_1 = var_0.attrib["title"]
        return var_1

    def _parse_thumbnail(self, doc: Selector):
        var_0 = doc
        var_1 = var_0.css("img.swiper-lazy")
        var_2 = var_1.attrib["src"]
        var_3 = "https://sameband.studio{}".format(var_2)
        return var_3


class SearchView(_BaseStructParser):
    """
        POST https://sameband.studio/index.php?do=search
        do=search&subaction=search&search_start=0&full_search=0&result_from=1&story=<QUERY>

        NOTE:
            search query len should be 4 or more characters. And in manual tests, works only cyrillic queries

        EXAMPLE:
            POST https://sameband.studio/index.php?do=search
        do=search&subaction=search&search_start=0&full_search=0&result_from=1&story=ВЕДЬ

        SearchView view() item signature:

    {
        "title": "String",
        "thumbnail": "String",
        "url": "String"
    }
    """

    def __init__(self, document: str):
        super().__init__(document)
        self._cached_result: _T_LIST_ITEMS = []

    def _part_document(self) -> SelectorList:
        doc = self.__selector__
        var_0 = doc
        var_1 = var_0.css(".col-auto")
        return var_1

    def _start_parse(self):
        self._cached_result.clear()
        for part in self._part_document():
            self._cached_result.append(
                {
                    "title": self._parse_title(part),
                    "thumbnail": self._parse_thumbnail(part),
                    "url": self._parse_url(part),
                }
            )

    def view(self) -> _T_LIST_ITEMS:
        return self._cached_result

    def _parse_title(self, doc: Selector):
        var_0 = doc
        var_1 = var_0.css(".col-auto .poster")
        var_2 = var_1.attrib["title"]
        return var_2

    def _parse_thumbnail(self, doc: Selector):
        var_0 = doc
        var_1 = var_0.css("img.swiper-lazy")
        var_2 = var_1.attrib["src"]
        var_3 = "https://sameband.studio{}".format(var_2)
        return var_3

    def _parse_url(self, doc: Selector):
        var_0 = doc
        var_1 = var_0.css(".image")
        var_2 = var_1.attrib["href"]
        return var_2


class AnimeView(_BaseStructParser):
    """
        GET https://sameband.studio/anime/<ANIME PATH>.html

        EXAMPLE:
            # https://sameband.studio/anime/20-госпожа-кагуя-3.html
            GET https://sameband.studio/anime/20-%D0%B3%D0%BE%D1%81%D0%BF%D0%BE%D0%B6%D0%B0-%D0%BA%D0%B0%D0%B3%D1%83%D1%8F-3.html

        AnimeView view() item signature:

    {
        "title": "String",
        "alt_title": "String",
        "description": "Array['String']",
        "thumbnail": "String",
        "player_url": "String"
    }
    """

    def __init__(self, document: str):
        super().__init__(document)
        self._cached_result: _T_DICT_ITEM = {}

    def _start_parse(self):
        self._cached_result.clear()
        self._cached_result["title"] = self._parse_title(self.__selector__)
        self._cached_result["alt_title"] = self._parse_alt_title(self.__selector__)
        self._cached_result["description"] = self._parse_description(self.__selector__)
        self._cached_result["thumbnail"] = self._parse_thumbnail(self.__selector__)
        self._cached_result["player_url"] = self._parse_player_url(self.__selector__)

    def view(self) -> _T_DICT_ITEM:
        return self._cached_result

    def _parse_title(self, doc: Selector):
        var_0 = doc
        var_1 = var_0.css("h1.m-0")
        var_2 = var_1.css("::text").get()
        return var_2

    def _parse_alt_title(self, doc: Selector):
        var_0 = doc
        var_1 = var_0.css(".help")
        var_2 = var_1.css("::text").get()
        return var_2

    def _parse_description(self, doc: Selector):
        var_0 = doc
        var_1 = var_0.css(".limiter span")
        var_2 = var_1.css("::text").getall()
        var_3 = " ".join(var_2)
        return var_3

    def _parse_thumbnail(self, doc: Selector):
        var_0 = doc
        var_1 = var_0.css(".image > img")
        var_2 = var_1.attrib["src"]
        var_3 = "https://sameband.studio{}".format(var_2)
        return var_3

    def _parse_player_url(self, doc: Selector):
        """dev value for access playlist

        playlist tag signature:

        <body>
            <div id="player"></div>
         <script>var player = new Playerjs({id:"player",file:"/v/list/....txt"});
        </script>
        </body>

        """

        var_0 = doc
        var_1 = var_0.css(".player > .player-content > iframe")
        var_2 = var_1.attrib["src"]
        var_3 = "https://sameband.studio{}".format(var_2)
        return var_3


class PlaylistURLView(_BaseStructParser):
    """GET https://sameband.studio/pl/a/<PLAYLIST NAME>.html

        EXAMPLE:
            GET https://sameband.studio/pl/a/Mashle_2nd_Season.html

        PlaylistURLView view() item signature:

    {
        "playlist_url": "String"
    }
    """

    def __init__(self, document: str):
        super().__init__(document)
        self._cached_result: _T_DICT_ITEM = {}

    def _start_parse(self):
        self._cached_result.clear()
        self._cached_result["playlist_url"] = self._parse_playlist_url(self.__selector__)

    def view(self) -> _T_DICT_ITEM:
        return self._cached_result

    def _parse_playlist_url(self, doc: Selector):
        """
          url contains in AnimeView.player_url key

          playlist items signature (need manually provide json inmarshall logic):

          [
        {
          "title": "<img src='/v/anime/...01 RUS_snapshot.jpg' class=playlist_poster><div class=playlist_duration>23:37</div>... 01",
          ### delimiter - ','
          "file": "[480p]/v/anime/... - 01 RUS_480p/... - 01 RUS_r480p.m3u8,[720p]/v/anime/.../... - 01 RUS_720p/... - 01 RUS_r720p.m3u8,[1080p]/v/anime/.../... -
          01 RUS_1080p/... - 01 RUS_r1080p.m3u8",
          ### thumbnails images for video
          "thumbnails": "/v/anime/.../thumbnails/... - 01 RUS.txt"  # contains
        },
        {
        ...
        },
        ...
        ]

        """

        var_0 = doc
        var_1 = var_0.get()
        var_2 = re.search(r"var\s*player\s*=[^>]+file:[\"']([^>]+)[\"']", var_1)[1]
        var_3 = "https://sameband.studio{}".format(var_2)
        return var_3
