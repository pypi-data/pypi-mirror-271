# Auto generated code by ssc_gen
# WARNING: Any manual changes made to this file will be lost when this
# is run again. Do not edit this file unless you know what you are doing.

from __future__ import annotations  # python 3.7, 3.8 comp
import re
from typing import Any, Union

from parsel import Selector, SelectorList

_T_DICT_ITEM = dict[str, Union[str, list[str]]]
_T_LIST_ITEMS = list[dict[str, Union[str, list[str]]]]


class _BaseStructParser:
    def __init__(self, document: str):
        self.__raw__ = document
        self.__selector__ = Selector(document)
        self._cached_result: Union[_T_DICT_ITEM, _T_LIST_ITEMS] = {}

    def _pre_validate(self, document: Selector) -> None:
        # pre validate entrypoint, contain assert expressions
        pass

    def parse(self):
        """run parser"""
        self._pre_validate(self.__selector__)
        self._start_parse()
        return self

    def view(self) -> Union[_T_DICT_ITEM, _T_LIST_ITEMS]:
        """get parsed values"""
        return self._cached_result

    def _start_parse(self):
        """parse logic entrypoint"""
        pass


class AnimeView(_BaseStructParser):
    """send request to anime page

        GET https://animania.online/<ANIME_PAGE_PATH>

        EXAMPLE:
            GET https://animania.online/9403-jeksperimenty-ljejn-serial-experiments-lain-1998-smotret-onlajn.html

        AnimeView view() item signature:

    {
        "title": "String",
        "description": "String",
        "thumbnail": "String"
    }
    """

    def __init__(self, document: str):
        super().__init__(document)
        self._cached_result: _T_DICT_ITEM = {}

    def _start_parse(self):
        self._cached_result.clear()
        self._cached_result["title"] = self._parse_title(self.__selector__)
        self._cached_result["description"] = self._parse_description(self.__selector__)
        self._cached_result["thumbnail"] = self._parse_thumbnail(self.__selector__)

    def view(self) -> _T_DICT_ITEM:
        return self._cached_result

    def _parse_title(self, doc: Selector):
        var_0 = doc
        var_1 = var_0.css("h1")
        var_2 = var_1.css("::text").get()
        return var_2

    def _parse_description(self, doc: Selector):
        var_0 = doc
        var_1 = var_0.css("#fdesc")
        var_2 = var_1.css("::text").get()
        return var_2

    def _parse_thumbnail(self, doc: Selector):
        var_0 = doc
        var_1 = var_0.css(".fposter img")
        var_2 = var_1.attrib["data-src"]
        var_3 = "https://animania.online{}".format(var_2)
        return var_3


class OngoingView(_BaseStructParser):
    """Send to main page request

        GET https://animania.online/

        OngoingView view() item signature:

    {
        "url": "String",
        "title": "String",
        "thumbnail": "String"
    }
    """

    def __init__(self, document: str):
        super().__init__(document)
        self._cached_result: _T_LIST_ITEMS = []

    def _part_document(self) -> SelectorList:
        doc = self.__selector__
        var_0 = doc
        var_1 = var_0.css(".short-tablet")
        return var_1

    def _start_parse(self):
        self._cached_result.clear()
        for part in self._part_document():
            self._cached_result.append(
                {
                    "url": self._parse_url(part),
                    "title": self._parse_title(part),
                    "thumbnail": self._parse_thumbnail(part),
                }
            )

    def view(self) -> _T_LIST_ITEMS:
        return self._cached_result

    def _parse_url(self, doc: Selector):
        var_0 = doc
        var_1 = var_0.css(".st-poster")
        var_2 = var_1.attrib["href"]
        return var_2

    def _parse_title(self, doc: Selector):
        var_0 = doc
        var_1 = var_0.css("h5")
        var_2 = var_1.css("::text").get()
        return var_2

    def _parse_thumbnail(self, doc: Selector):
        var_0 = doc
        var_1 = var_0.css("img")
        var_2 = var_1.attrib["data-src"]
        var_3 = "https://animania.online{}".format(var_2)
        return var_3


class VideoView(_BaseStructParser):
    """send request to anime page

            GET https://animania.online/<ANIME PATH>
        EXAMPLE:
            GET https://animania.online/9403-jeksperimenty-ljejn-serial-experiments-lain-1998-smotret-onlajn.html

        VideoView view() item signature:

    {
        "id": "String",
        "names": "Array['String']",
        "urls": "Array['String']"
    }
    """

    def __init__(self, document: str):
        super().__init__(document)
        self._cached_result: _T_LIST_ITEMS = []

    def _part_document(self) -> SelectorList:
        doc = self.__selector__
        var_0 = doc
        var_1 = var_0.css("#ks-episodes > li")
        return var_1

    def _start_parse(self):
        self._cached_result.clear()
        for part in self._part_document():
            self._cached_result.append(
                {
                    "id": self._parse_id(part),
                    "names": self._parse_names(part),
                    "urls": self._parse_urls(part),
                }
            )

    def view(self) -> _T_LIST_ITEMS:
        return self._cached_result

    def _parse_id(self, doc: Selector):
        """get dubber id

        attr signature <li id="season1" ...>

        """

        var_0 = doc
        var_1 = var_0.attrib["id"]
        var_2 = var_1.lstrip("season")
        return var_2

    def _parse_names(self, doc: Selector):
        var_0 = doc
        var_1 = var_0.css("span")
        var_2 = var_1.css("::text").getall()
        return var_2

    def _parse_urls(self, doc: Selector):
        var_0 = doc
        var_1 = var_0.get()
        var_2 = re.findall(r"'(//.*?)'", var_1)
        var_3 = ["https:{}".format(s) for s in var_2]
        return var_3


class SearchView(_BaseStructParser):
    """Send search request

        GET https://animania.online/index.php
        story={QUERY}&do=search&subaction=search


        EXAMPLE:

            GET https://animania.online/index.php?do=search&subaction=search&story=LAIN

        SearchView view() item signature:

    {
        "title": "String",
        "thumbnail": "String",
        "url": "String"
    }
    """

    def __init__(self, document: str):
        super().__init__(document)
        self._cached_result: _T_LIST_ITEMS = []

    def _part_document(self) -> SelectorList:
        doc = self.__selector__
        var_0 = doc
        var_1 = var_0.css("#short")
        return var_1

    def _start_parse(self):
        self._cached_result.clear()
        for part in self._part_document():
            self._cached_result.append(
                {
                    "title": self._parse_title(part),
                    "thumbnail": self._parse_thumbnail(part),
                    "url": self._parse_url(part),
                }
            )

    def view(self) -> _T_LIST_ITEMS:
        return self._cached_result

    def _parse_title(self, doc: Selector):
        var_0 = doc
        var_1 = var_0.css("img")
        var_2 = var_1.attrib["alt"]
        return var_2

    def _parse_thumbnail(self, doc: Selector):
        var_0 = doc
        var_1 = var_0.css("img")
        var_2 = var_1.attrib["src"]
        var_3 = "https://animania.online{}".format(var_2)
        return var_3

    def _parse_url(self, doc: Selector):
        var_0 = doc
        var_1 = var_0.css("a")
        var_2 = var_1.attrib["href"]
        return var_2


class DubbersView(_BaseStructParser):
    """send to anime page request

        GET https://animania.online/<ANIME PATH>

        EXAMPLE:
            GET https://animania.online/9403-jeksperimenty-ljejn-serial-experiments-lain-1998-smotret-onlajn.html

        DubbersView view() item signature:

    {
        "key": "String",
        "value": "String"
    }
    """

    def __init__(self, document: str):
        super().__init__(document)
        self._cached_result: _T_DICT_ITEM = {}

    def _part_document(self) -> SelectorList:
        doc = self.__selector__
        var_0 = doc
        var_1 = var_0.css("#ks-translations > span")
        return var_1

    def _start_parse(self):
        self._cached_result.clear()
        for part in self._part_document():
            self._cached_result[self._parse_key(part)] = self._parse_value(part)

    def view(self) -> _T_DICT_ITEM:
        return self._cached_result

    def _parse_key(self, doc: Selector):
        """get dubber id

        attr signature kodikSlider.season('1', this)

        """

        var_0 = doc
        var_1 = var_0.attrib["onclick"]
        var_2 = re.search(r"(\d+)", var_1)[1]
        return var_2

    def _parse_value(self, doc: Selector):
        var_0 = doc
        var_1 = var_0.css("::text").get()
        return var_1
