use crate::dir_writer::LanguageFeatures;
use internal_baml_core::ir::TypeValue;

#[derive(Default)]
pub(super) struct PythonLanguageFeatures {}

impl LanguageFeatures for PythonLanguageFeatures {
    fn content_prefix(&self) -> &'static str {
        // "typed: strict" is set on a per-file basis in Python
        r#"
###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off
        "#
        .trim()
    }

    fn to_file_path(&self, name: &str) -> std::path::PathBuf {
        std::path::PathBuf::from(name.to_lowercase()).with_extension("rb")
    }
}

pub(super) trait ToPython {
    fn to_python(&self) -> String;
}

impl ToPython for TypeValue {
    fn to_python(&self) -> String {
        match self {
            TypeValue::Bool => "bool".to_string(),
            TypeValue::Float => "float".to_string(),
            TypeValue::Int => "int".to_string(),
            TypeValue::String => "str".to_string(),
            TypeValue::Null => "None".to_string(),
            TypeValue::Char => "str".to_string(),
            TypeValue::Image => "baml_py.Image".to_string(),
        }
    }
}
