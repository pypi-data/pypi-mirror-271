
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import com.github.javacliparser
import com.yahoo.labs.samoa.instances
import java.lang
import moa.capabilities
import moa.classifiers
import moa.classifiers.lazy.neighboursearch
import moa.core
import typing



class SAMkNN(moa.classifiers.AbstractClassifier, moa.classifiers.MultiClassClassifier, moa.capabilities.CapabilitiesHandler):
    kOption: com.github.javacliparser.IntOption = ...
    limitOption: com.github.javacliparser.IntOption = ...
    minSTMSizeOption: com.github.javacliparser.IntOption = ...
    relativeLTMSizeOption: com.github.javacliparser.FloatOption = ...
    recalculateSTMErrorOption: com.github.javacliparser.FlagOption = ...
    def __init__(self): ...
    def defineImmutableCapabilities(self) -> moa.capabilities.ImmutableCapabilities: ...
    def getModelDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getPurposeString(self) -> str: ...
    @typing.overload
    def getVotesForInstance(self, example: moa.core.Example[com.yahoo.labs.samoa.instances.Instance]) -> typing.MutableSequence[float]: ...
    @typing.overload
    def getVotesForInstance(self, instance: com.yahoo.labs.samoa.instances.Instance) -> typing.MutableSequence[float]: ...
    def isRandomizable(self) -> bool: ...
    def resetLearningImpl(self) -> None: ...
    def setModelContext(self, instancesHeader: com.yahoo.labs.samoa.instances.InstancesHeader) -> None: ...
    def trainOnInstanceImpl(self, instance: com.yahoo.labs.samoa.instances.Instance) -> None: ...

class kNN(moa.classifiers.AbstractClassifier, moa.classifiers.MultiClassClassifier, moa.classifiers.Regressor):
    kOption: com.github.javacliparser.IntOption = ...
    medianOption: com.github.javacliparser.FlagOption = ...
    limitOption: com.github.javacliparser.IntOption = ...
    nearestNeighbourSearchOption: com.github.javacliparser.MultiChoiceOption = ...
    def __init__(self): ...
    def getModelDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getPurposeString(self) -> str: ...
    @typing.overload
    def getVotesForInstance(self, example: moa.core.Example[com.yahoo.labs.samoa.instances.Instance]) -> typing.MutableSequence[float]: ...
    @typing.overload
    def getVotesForInstance(self, instance: com.yahoo.labs.samoa.instances.Instance) -> typing.MutableSequence[float]: ...
    def isRandomizable(self) -> bool: ...
    def resetLearningImpl(self) -> None: ...
    def setModelContext(self, instancesHeader: com.yahoo.labs.samoa.instances.InstancesHeader) -> None: ...
    def trainOnInstanceImpl(self, instance: com.yahoo.labs.samoa.instances.Instance) -> None: ...

class kNNwithPAW(kNN, moa.classifiers.MultiClassClassifier):
    def __init__(self): ...
    def getModelDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getPurposeString(self) -> str: ...
    def isRandomizable(self) -> bool: ...
    def resetLearningImpl(self) -> None: ...
    def trainOnInstanceImpl(self, instance: com.yahoo.labs.samoa.instances.Instance) -> None: ...

class kNNwithPAWandADWIN(kNN, moa.classifiers.MultiClassClassifier):
    def __init__(self): ...
    def getModelDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getPurposeString(self) -> str: ...
    def isRandomizable(self) -> bool: ...
    def resetLearningImpl(self) -> None: ...
    def trainOnInstanceImpl(self, instance: com.yahoo.labs.samoa.instances.Instance) -> None: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("moa.classifiers.lazy")``.

    SAMkNN: typing.Type[SAMkNN]
    kNN: typing.Type[kNN]
    kNNwithPAW: typing.Type[kNNwithPAW]
    kNNwithPAWandADWIN: typing.Type[kNNwithPAWandADWIN]
    neighboursearch: moa.classifiers.lazy.neighboursearch.__module_protocol__
