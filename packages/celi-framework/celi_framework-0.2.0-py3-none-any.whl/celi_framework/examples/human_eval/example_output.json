{
  "HumanEval/0": "    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False",
  "HumanEval/1": "    # Remove spaces from the input string\n    paren_string = paren_string.replace(' ', '')\n    result = []\n    stack = []\n    current_group = ''\n    for char in paren_string:\n        if char == '(':  # Start of a new group or nested group\n            stack.append(char)\n            current_group += char\n        elif char == ')' and stack:  # End of a group or nested group\n            stack.pop()\n            current_group += char\n            if not stack:  # If stack is empty, we've closed a group\n                result.append(current_group)\n                current_group = ''  # Reset for the next group\n    return result",
  "HumanEval/2": "    return number - int(number)",
  "HumanEval/3": "    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False",
  "HumanEval/4": "    mean = sum(numbers) / len(numbers)\n    mad = sum(abs(x - mean) for x in numbers) / len(numbers)\n    return mad",
  "HumanEval/5": "    result = []\n    for i, num in enumerate(numbers):\n        result.append(num)\n        if i < len(numbers) - 1:  # Check if not the last element\n            result.append(delimeter)\n    return result",
  "HumanEval/6": "    groups = paren_string.split(' ')\n    max_depths = []\n    for group in groups:\n        depth = 0\n        max_depth = 0\n        for char in group:\n            if char == '(':  \n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif char == ')':  \n                depth -= 1\n        max_depths.append(max_depth)\n    return max_depths\n",
  "HumanEval/7": "    from typing import List\n\n    def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n        return [s for s in strings if substring in s]",
  "HumanEval/8": "    # Initialize sum and product\n    sum_of_numbers = 0\n    product_of_numbers = 1\n    # Iterate through the list to calculate sum and product\n    for number in numbers:\n        sum_of_numbers += number\n        product_of_numbers *= number\n    return (sum_of_numbers, product_of_numbers)",
  "HumanEval/9": "    if not numbers:  # Check if the list is empty\n        return []\n    max_so_far = numbers[0]\n    rolling_maxes = [max_so_far]\n    for number in numbers[1:]:\n        max_so_far = max(max_so_far, number)\n        rolling_maxes.append(max_so_far)\n    return rolling_maxes",
  "HumanEval/10": "    if string == string[::-1]:\n        return string\n    for i in range(len(string) - 1, -1, -1):\n        if string[:i] == string[:i][::-1]:\n            return string + string[i:][::-1]\n    return string",
  "HumanEval/11": "    # Find the length of the longer string to maintain leading zeros\n    max_length = max(len(a), len(b))\n    # Perform XOR operation and convert to binary without '0b' prefix\n    result = bin(int(a, 2) ^ int(b, 2))[2:]\n    # Prepend leading zeros to maintain the length of the longer input string\n    result = result.zfill(max_length)\n    return result",
  "HumanEval/12": "    if not strings:\n        return None\n    return max(strings, key=len)",
  "HumanEval/13": "    while b:\n        a, b = b, a % b\n    return a\n",
  "HumanEval/14": "    return [string[:i+1] for i in range(len(string))]\n",
  "HumanEval/15": "    return ' '.join(str(i) for i in range(n + 1))",
  "HumanEval/16": "    return len(set(string.lower()))",
  "HumanEval/17": "    # Split the music string into individual notes\n    notes = music_string.split()\n    # Initialize an empty list to store the beats\n    beats = []\n    # Loop through each note and convert to beats\n    for note in notes:\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n    return beats",
  "HumanEval/18": "    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count\n",
  "HumanEval/19": "    # Mapping of number words to their numeric values\n    num_map = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    # Split the input string into a list of number words\n    num_words = numbers.split()\n    # Sort the list of number words based on their numeric value\n    sorted_words = sorted(num_words, key=lambda word: num_map[word])\n    # Join the sorted list back into a string and return\n    return ' '.join(sorted_words)",
  "HumanEval/20": "    numbers.sort()  # Sort the numbers to make it easier to find the closest pair\n    closest_pair = (numbers[0], numbers[1])\n    min_diff = abs(numbers[1] - numbers[0])\n    for i in range(1, len(numbers) - 1):\n        diff = abs(numbers[i + 1] - numbers[i])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i + 1])\n    return closest_pair",
  "HumanEval/21": "    min_num = min(numbers)\n    max_num = max(numbers)\n    range_num = max_num - min_num\n    return [(num - min_num) / range_num for num in numbers]",
  "HumanEval/22": "    return [value for value in values if isinstance(value, int)]\n",
  "HumanEval/23": "    return len(string)",
  "HumanEval/24": "    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i\n    return 1",
  "HumanEval/25": "    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    return factors",
  "HumanEval/26": "    seen = set()\n    result = []\n    for number in numbers:\n        if number not in seen:\n            result.append(number)\n            seen.add(number)\n    return result",
  "HumanEval/27": "    return ''.join(c.lower() if c.isupper() else c.upper() for c in string)",
  "HumanEval/28": "    return ''.join(strings)",
  "HumanEval/29": "    return [s for s in strings if s.startswith(prefix)]",
  "HumanEval/30": "    return [num for num in l if num > 0]",
  "HumanEval/31": "    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True",
  "HumanEval/32": "    # Since the polynomial is guaranteed to have a zero due to the constraints,\n    # we can use a numerical method to find a root. Here, we use the Newton-Raphson method.\n    def derivative(xs):\n        \"\"\"Calculates the derivative of the polynomial.\"\"\"\n        return [i*coeff for i, coeff in enumerate(xs)][1:]\n\n    def newton_raphson(xs, guess=0.0, max_iter=1000, tol=1e-6):\n        \"\"\"Finds a zero using the Newton-Raphson method.\"\"\"\n        for _ in range(max_iter):\n            f_val = poly(xs, guess)\n            f_deriv = poly(derivative(xs), guess)\n            if abs(f_val) < tol:\n                return guess\n            guess -= f_val / f_deriv\n        return guess\n\n    return newton_raphson(xs)",
  "HumanEval/33": "    # Correcting the approach to match the problem statement\n    # Indices divisible by three are actually those with indices like 0, 3, 6 (0-based indexing)\n    divisible_by_three = [l[i] for i in range(0, len(l), 3)]\n    # Sort these elements\n    divisible_by_three_sorted = sorted(divisible_by_three)\n    # Replace elements in original list with sorted ones\n    for i, val in enumerate(divisible_by_three_sorted):\n        l[i*3] = val\n    return l",
  "HumanEval/34": "    return sorted(set(l))",
  "HumanEval/35": "    return max(l)",
  "HumanEval/36": "    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count",
  "HumanEval/37": "    even_indices = [l[i] for i in range(len(l)) if i % 2 == 0]\n    even_indices.sort()\n    for i, value in enumerate(even_indices):\n        l[i*2] = value\n    return l",
  "HumanEval/38": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)",
  "HumanEval/39": "    from math import sqrt\n\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fib_generator():\n        a, b = 0, 1\n        while True:\n            yield a\n            a, b = b, a + b\n\n    count = 0\n    for fib_num in fib_generator():\n        if fib_num > 1 and is_prime(fib_num):\n            count += 1\n            if count == n:\n                return fib_num",
  "HumanEval/40": "    from itertools import combinations\n    # Generate all possible triples from the list\n    for triple in combinations(l, 3):\n        # Check if the sum of elements in the triple is zero\n        if sum(triple) == 0:\n            return True\n    return False",
  "HumanEval/41": "    # Since all cars move at the same speed and start far apart, each car moving left to right\n    # will eventually collide with each car moving right to left. Therefore, the total number\n    # of collisions will be n * n, where n is the number of cars in each direction.\n    return n * n\n",
  "HumanEval/42": "    return [x + 1 for x in l]",
  "HumanEval/43": "    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False",
  "HumanEval/44": "    if x == 0:\n        return '0'\n    digits = ''\n    while x > 0:\n        digits = str(x % base) + digits\n        x = x // base\n    return digits",
  "HumanEval/45": "    return 0.5 * a * h",
  "HumanEval/46": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for _ in range(4, n + 1):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d",
  "HumanEval/47": "    l.sort()\n    n = len(l)\n    if n % 2 == 1:\n        return l[n//2]\n    else:\n        return (l[n//2 - 1] + l[n//2]) / 2.0\n",
  "HumanEval/48": "    return text == text[::-1]",
  "HumanEval/49": "    return pow(2, n, p)",
  "HumanEval/50": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])",
  "HumanEval/51": "    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char not in vowels])",
  "HumanEval/52": "    return all(x < t for x in l)",
  "HumanEval/53": "    return x + y",
  "HumanEval/54": "    # Placeholder function body\n    pass",
  "HumanEval/55": "    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b\n",
  "HumanEval/56": "    count = 0\n    for char in brackets:\n        if char == '<':\n            count += 1\n        elif char == '>':\n            if count == 0:\n                return False\n            count -= 1\n    return count == 0\n",
  "HumanEval/57": "    if not l:  # If the list is empty, it's considered monotonic\n        return True\n    increasing = decreasing = True\n    for i in range(1, len(l)):\n        if l[i] > l[i-1]:\n            decreasing = False\n        elif l[i] < l[i-1]:\n            increasing = False\n    return increasing or decreasing\n",
  "HumanEval/58": "    return sorted(set(l1) & set(l2))",
  "HumanEval/59": "    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    factor = n\n    largest_prime = 2\n    while factor % 2 == 0:\n        factor //= 2\n    for i in range(3, int(n**0.5) + 1, 2):\n        while factor % i == 0:\n            largest_prime = i\n            factor //= i\n    if factor > 2:\n        largest_prime = factor\n    return largest_prime",
  "HumanEval/62": "    return [i * xs[i] for i in range(1, len(xs))]\n",
  "HumanEval/63": "    # Base cases\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    # Recursive case with memoization\n    memo = {0: 0, 1: 0, 2: 1}\n    def helper(n):\n        if n not in memo:\n            memo[n] = helper(n-1) + helper(n-2) + helper(n-3)\n        return memo[n]\n    return helper(n)",
  "HumanEval/64": "    vowels = 'aeiou'\n    count = 0\n    for char in s.lower():\n        if char in vowels:\n            count += 1\n    if s[-1].lower() == 'y':\n        count += 1\n    return count",
  "HumanEval/65": "    x_str = str(x)\n    len_x = len(x_str)\n    shift %= len_x\n    if shift == 0:\n        return x_str\n    return x_str[-shift:] + x_str[:-shift]",
  "HumanEval/66": "    return sum(ord(c) for c in s if c.isupper())",
  "HumanEval/67": "    # Split the string to extract numbers\n    numbers = [int(num) for num in s.split() if num.isdigit()]\n    # Calculate the number of mango fruits\n    mangoes = n - sum(numbers)\n    return mangoes\n",
  "HumanEval/68": "    # Initialize variables to store the smallest even value and its index\n    smallest_even = float('inf')\n    smallest_index = -1\n\n    # Iterate through the array to find the smallest even value and its index\n    for i, value in enumerate(arr):\n        if value % 2 == 0 and value < smallest_even:\n            smallest_even = value\n            smallest_index = i\n\n    # Check if an even value was found\n    if smallest_even == float('inf'):\n        return []\n    else:\n        return [smallest_even, smallest_index]",
  "HumanEval/69": "    from collections import Counter\n    # Count the frequency of each number in the list\n    freq = Counter(lst)\n    # Initialize the result variable\n    result = -1\n    # Iterate through the frequency dictionary\n    for num, count in freq.items():\n        # Check if the frequency is greater than or equal to the number itself\n        if count >= num:\n            # Update the result if the current number is greater than the current result\n            result = max(result, num)\n    return result\n",
  "HumanEval/70": "    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop())\n    return result\n",
  "HumanEval/71": "    # Check if the sides form a valid triangle\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    # Calculate the semi-perimeter\n    s = (a + b + c) / 2\n    # Calculate the area using Heron's formula\n    area = (s*(s-a)*(s-b)*(s-c)) ** 0.5\n    # Return the area rounded to 2 decimal points\n    return round(area, 2)",
  "HumanEval/72": "    return sum(q) <= w and q == q[::-1]",
  "HumanEval/73": "    # Initialize a counter for changes\n    changes = 0\n    # Calculate the length of the array\n    n = len(arr)\n    # Loop through the first half of the array\n    for i in range(n // 2):\n        # If the corresponding elements in the first and second half are not equal\n        if arr[i] != arr[n - i - 1]:\n            # Increment the changes counter\n            changes += 1\n    # Return the total number of changes needed\n    return changes\n",
  "HumanEval/74": "    # Calculate the total number of chars in each list\n    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n\n    # Compare the total number of chars and return the appropriate list\n    if total_chars_lst1 <= total_chars_lst2:\n        return lst1\n    else:\n        return lst2\n",
  "HumanEval/75": "    if a < 2:\n        return False\n    \n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    primes = [i for i in range(2, a + 1) if is_prime(i)]\n    count = 0\n    for prime in primes:\n        while a % prime == 0:\n            a //= prime\n            count += 1\n            if count > 3:\n                return False\n    return count == 3",
  "HumanEval/76": "    if x == 1:\n        return True\n    if n in (0, 1):\n        return False\n    current_power = n\n    while current_power <= x:\n        if current_power == x:\n            return True\n        current_power *= n\n    return False",
  "HumanEval/77": "    if a == 0: return True\n    abs_a = abs(a)\n    root = round(abs_a ** (1/3))\n    return root ** 3 == abs_a\n",
  "HumanEval/78": "    # Define the prime hexadecimal digits\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    # Count the number of prime hexadecimal digits in the input string\n    count = sum(1 for digit in num if digit in prime_hex_digits)\n    return count\n",
  "HumanEval/79": "    return 'db' + bin(decimal)[2:] + 'db'",
  "HumanEval/80": "    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n            return False\n    return True\n",
  "HumanEval/81": "    letter_grades = []\n    for grade in grades:\n        if grade == 4.0:\n            letter_grades.append('A+')\n        elif grade > 3.7:\n            letter_grades.append('A')\n        elif grade > 3.3:\n            letter_grades.append('A-')\n        elif grade > 3.0:\n            letter_grades.append('B+')\n        elif grade > 2.7:\n            letter_grades.append('B')\n        elif grade > 2.3:\n            letter_grades.append('B-')\n        elif grade > 2.0:\n            letter_grades.append('C+')\n        elif grade > 1.7:\n            letter_grades.append('C')\n        elif grade > 1.3:\n            letter_grades.append('C-')\n        elif grade > 1.0:\n            letter_grades.append('D+')\n        elif grade > 0.7:\n            letter_grades.append('D')\n        elif grade > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades",
  "HumanEval/82": "    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))",
  "HumanEval/83": "    if n == 1:\n        return 1\n    elif n == 2:\n        return 20\n    else:\n        return 2 * 10 ** (n - 1) - 10 ** (n - 2)",
  "HumanEval/84": "    # Convert the integer N to its string representation\n    # Sum the digits of N\n    digit_sum = sum(int(digit) for digit in str(N))\n    # Convert the sum of digits to binary and return\n    return bin(digit_sum)[2:]",
  "HumanEval/85": "    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)",
  "HumanEval/86": "    def sort_word(word):\n        return ''.join(sorted(word))\n\n    # Split the input string into 'words' considering spaces and non-space characters\n    import re\n    parts = re.findall(r'\\S+|\\s+', s)\n    # Sort characters in each 'word' part, leaving spaces unchanged\n    sorted_parts = [sort_word(part) if part.strip() != '' else part for part in parts]\n    # Join the parts back together\n    return ''.join(sorted_parts)",
  "HumanEval/87": "    # Initialize an empty list to store the coordinates\n    coordinates = []\n    # Iterate through the list with both index and value\n    for i, row in enumerate(lst):\n        # Iterate through each row with both index and value\n        for j, value in enumerate(row):\n            # Check if the value matches x\n            if value == x:\n                # If it matches, append the coordinate to the list\n                coordinates.append((i, j))\n    # Sort the coordinates first by row in ascending order\n    # Then by column in descending order within each row\n    coordinates.sort(key=lambda coord: (coord[0], -coord[1]))\n    return coordinates",
  "HumanEval/88": "    # Check if the sum of the first and last element is even or odd\n    if len(array) == 0 or (array[0] + array[-1]) % 2 == 0:\n        # Sort in descending order if sum is even or array is empty\n        return sorted(array, reverse=True)\n    else:\n        # Sort in ascending order if sum is odd\n        return sorted(array)",
  "HumanEval/89": "    result = ''\n    for char in s:\n        if char.isalpha():\n            # Calculate the shift\n            shift = (ord(char.lower()) - ord('a') + 4) % 26\n            # Apply the shift and convert back to character\n            result += chr(shift + ord('a'))\n        else:\n            result += char\n    return result",
  "HumanEval/90": "    unique_sorted_lst = sorted(set(lst))\n    if len(unique_sorted_lst) < 2:\n        return None\n    else:\n        return unique_sorted_lst[1]",
  "HumanEval/91": "    # Split the string into sentences\n    sentences = re.split(r'[.?!] ', S)\n    # Initialize boredom count\n    boredom_count = 0\n    # Loop through each sentence\n    for sentence in sentences:\n        # Check if the sentence starts with 'I' after stripping leading and trailing spaces\n        if sentence.startswith('I'):\n            boredom_count += 1\n    return boredom_count\n\nimport re",
  "HumanEval/92": "    # Check if all numbers are integers\n    if not all(isinstance(i, int) for i in [x, y, z]):\n        return False\n    # Check if one of the numbers is equal to the sum of the other two\n    return x == y + z or y == x + z or z == x + y\n",
  "HumanEval/93": "def encode(message):\n    def shift_vowel(vowel):\n        # Define the mapping for vowels to shift two places\n        mapping = {'a': 'c', 'e': 'g', 'i': 'k', 'o': 'm', 'u': 'w',\n                   'A': 'C', 'E': 'G', 'I': 'K', 'O': 'M', 'U': 'W'}\n        return mapping.get(vowel, vowel)\n\n    # Swap case for all letters and replace vowels accordingly\n    return ''.join(shift_vowel(c) if c in 'aeiouAEIOU' else c.swapcase() for c in message)",
  "HumanEval/94": "    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    max_prime = max(filter(is_prime, lst), default=0)\n    return sum(int(digit) for digit in str(max_prime))",
  "HumanEval/95": "    if not dict:  # Check if the dictionary is empty\n        return False\n    # Check if all keys are strings\n    if not all(isinstance(key, str) for key in dict):\n        return False\n    # Check if all keys are either all lower case or all upper case\n    keys_are_lower = all(key.islower() for key in dict)\n    keys_are_upper = all(key.isupper() for key in dict)\n    return keys_are_lower or keys_are_upper\n",
  "HumanEval/96": "    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = []\n    for num in range(2, n):\n        if is_prime(num):\n            primes.append(num)\n    return primes",
  "HumanEval/97": "    # Extract the unit digits of both numbers\n    unit_a = abs(a) % 10\n    unit_b = abs(b) % 10\n    # Return the product of the unit digits\n    return unit_a * unit_b\n",
  "HumanEval/98": "    vowels = 'AEIOU'\n    return sum(1 for i, c in enumerate(s) if i % 2 == 0 and c in vowels)",
  "HumanEval/99": "    # Convert the string to a float\n    value_float = float(value)\n    # Use round half away from zero\n    if value_float > 0:\n        return int(value_float + 0.5)\n    else:\n        return int(value_float - 0.5)",
  "HumanEval/100": "    # Start with the first level having n stones\n    stones = n\n    # Initialize the list with the first level\n    levels = [stones]\n\n    # Loop to fill the rest of the levels\n    for _ in range(1, n):\n        # Determine the next number of stones based on the current number's parity\n        if stones % 2 == 0:\n            stones += 2\n        else:\n            stones += 2\n        levels.append(stones)\n\n    return levels\n",
  "HumanEval/101": "    # Split the string by commas or spaces\n    words = s.replace(',', ' ').split()\n    return words",
  "HumanEval/102": "    # Check if x is greater than y, if so, no number in the range\n    if x > y:\n        return -1\n    # If y is even, return y\n    if y % 2 == 0:\n        return y\n    # If y is odd, check if y-1 is in the range\n    elif y-1 >= x:\n        return y-1\n    # If no even number in the range\n    else:\n        return -1",
  "HumanEval/103": "    if n > m:\n        return -1\n    avg = round((n + m) / 2)\n    return bin(avg)",
  "HumanEval/104": "    # Filter elements that do not contain even digits\n    filtered = [num for num in x if all(int(digit) % 2 != 0 for digit in str(num))]\n    # Return the sorted list of filtered elements\n    return sorted(filtered)",
  "HumanEval/105": "    # Define the mapping from integers to their word representations\n    num_to_word = {\n        1: 'One', 2: 'Two', 3: 'Three', 4: 'Four', 5: 'Five',\n        6: 'Six', 7: 'Seven', 8: 'Eight', 9: 'Nine'\n    }\n\n    # Filter the array to include only numbers between 1 and 9\n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n\n    # Sort, reverse, and convert to words\n    sorted_reversed_arr = sorted(filtered_arr, reverse=True)\n    result = [num_to_word[num] for num in sorted_reversed_arr]\n\n    return result",
  "HumanEval/106": "    def factorial(x):\n        if x == 0 or x == 1:\n            return 1\n        else:\n            return x * factorial(x-1)\n\n    def sum_to_i(x):\n        return sum(range(1, x+1))\n\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_to_i(i))\n    return result\n",
  "HumanEval/107": "    def is_palindrome(x):\n        return str(x) == str(x)[::-1]\n\n    even_count, odd_count = 0, 0\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)",
  "HumanEval/108": "    def sum_of_digits(n):\n        if n < 0:\n            return sum(int(d) for d in str(abs(n))[1:]) - int(str(n)[1])\n        else:\n            return sum(int(d) for d in str(n))\n\n    return sum(1 for num in arr if sum_of_digits(num) > 0)",
  "HumanEval/109": "    if not arr:  # If the array is empty, return True\n        return True\n    \n    # Count the number of times an element is greater than the next element\n    count = sum(arr[i] > arr[i+1] for i in range(len(arr)-1))\n    \n    # If count is 0, the array is already sorted\n    # If count is 1, it means by shifting we can make the array sorted\n    # If count is more than 1, it's not possible to sort the array by shifting\n    return count <= 1",
  "HumanEval/110": "    # Count the number of even numbers in lst1\n    even_count_lst1 = sum(1 for x in lst1 if x % 2 == 0)\n    # Count the number of odd numbers in lst1\n    odd_count_lst1 = len(lst1) - even_count_lst1\n    # Count the number of even numbers in lst2\n    even_count_lst2 = sum(1 for x in lst2 if x % 2 == 0)\n    # If the number of odd numbers in lst1 can be replaced by even numbers in lst2, return \"YES\"\n    if odd_count_lst1 <= even_count_lst2:\n        return \"YES\"\n    else:\n        return \"NO\"",
  "HumanEval/111": "    from collections import Counter\n    # Split the input string into words\n    words = test.split()\n    # Use Counter to count occurrences of each letter\n    counts = Counter(words)\n    # Find the maximum occurrence\n    max_occurrence = max(counts.values(), default=0)\n    # Filter letters that have the maximum occurrence\n    result = {letter: count for letter, count in counts.items() if count == max_occurrence}\n    return result\n",
  "HumanEval/112": "    # Remove characters in c from s\n    result = ''.join([char for char in s if char not in c])\n    # Check if result is a palindrome\n    is_palindrome = result == result[::-1]\n    return (result, is_palindrome)",
  "HumanEval/113": "    result = []\n    for s in lst:\n        odd_count = sum(1 for char in s if int(char) % 2 != 0)\n        result.append(f\"the number of odd elements {odd_count}n the str{odd_count}ng {odd_count} of the {odd_count}nput.\")\n    return result\n",
  "HumanEval/114": "    min_sum = float('inf')\n    current_sum = 0\n\n    for num in nums:\n        if current_sum > 0:\n            current_sum = num\n        else:\n            current_sum += num\n        min_sum = min(min_sum, current_sum)\n\n    return min_sum",
  "HumanEval/115": "    import math\n    # Count the total units of water in each well and divide by capacity to find\n    # how many times we need to lower the bucket for each well, then sum these up\n    return sum(math.ceil(sum(row) / capacity) for row in grid)",
  "HumanEval/116": "    # Sort the array based on the number of ones in their binary representation\n    # and then by their decimal value if the number of ones is the same\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n",
  "HumanEval/117": "    vowels = 'aeiouAEIOU'\n    def count_consonants(word):\n        return sum(1 for char in word if char not in vowels and char.isalpha())\n\n    words = s.split()\n    result = [word for word in words if count_consonants(word) == n]\n    return result\n",
  "HumanEval/118": "    vowels = 'aeiouAEIOU'\n    # Reverse the word to find the closest vowel from the right side\n    reversed_word = word[::-1]\n    for i in range(1, len(reversed_word) - 1):\n        # Check if the current character is a vowel and is between two consonants\n        if reversed_word[i] in vowels and reversed_word[i-1] not in vowels and reversed_word[i+1] not in vowels:\n            return reversed_word[i]\n    return ''",
  "HumanEval/119": "    # Calculate the net parentheses balance for each string\n    balance_1 = lst[0].count('(') - lst[0].count(')')\n    balance_2 = lst[1].count('(') - lst[1].count(')')\n    # If the total balance is not zero, it's impossible to form a good string\n    if balance_1 + balance_2 != 0:\n        return 'No'\n    # If one string has more opening parentheses and the other has more closing parentheses, it might be possible\n    if (balance_1 >= 0 and balance_2 <= 0) or (balance_1 <= 0 and balance_2 >= 0):\n        return 'Yes'\n    # Otherwise, it's not possible to form a good string\n    return 'No'",
  "HumanEval/120": "    # Sort the array in descending order\n    sorted_arr = sorted(arr, reverse=True)\n    # Return the first k elements\n    return sorted_arr[:k]",
  "HumanEval/121": "    # Initialize sum of odd elements in even positions\n    sum_odd_even_pos = 0\n    # Iterate through the list, considering only even positions (0-indexed)\n    for i in range(0, len(lst), 2):\n        # Check if the element in the even position is odd\n        if lst[i] % 2 != 0:\n            # Add it to the sum\n            sum_odd_even_pos += lst[i]\n    return sum_odd_even_pos\n",
  "HumanEval/122": "    # Initialize sum\n    sum_elements = 0\n    # Iterate through the first k elements\n    for num in arr[:k]:\n        # Check if the number has at most two digits\n        if 0 < num < 100 or -100 < num < 0:\n            sum_elements += num\n    return sum_elements",
  "HumanEval/123": "    odd_numbers = []\n    while n != 1:\n        if n % 2 != 0:\n            odd_numbers.append(n)\n        n = n // 2 if n % 2 == 0 else 3 * n + 1\n    odd_numbers.append(1)  # Adding 1 as it's always part of the sequence\n    return sorted(odd_numbers)",
  "HumanEval/124": "    # Split the date string by '-'\n    parts = date.split('-')\n    # Check if the date is in the correct format\n    if len(parts) != 3:\n        return False\n    month, day, year = parts\n    # Check if month, day, and year are digits\n    if not (month.isdigit() and day.isdigit() and year.isdigit()):\n        return False\n    month, day, year = int(month), int(day), int(year)\n    # Check month range\n    if month < 1 or month > 12:\n        return False\n    # Check day range based on month\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n    else:\n        return False\n    return True",
  "HumanEval/125": "    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for c in txt if c.islower() and ord(c) % 2 != ord('a') % 2)",
  "HumanEval/126": "    # Check if the list is already sorted\n    if lst == sorted(lst):\n        # Check for more than one duplicate of the same number\n        for i in set(lst):\n            if lst.count(i) > 2:\n                return False\n        return True\n    else:\n        return False",
  "HumanEval/127": "    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    start_max = max(interval1[0], interval2[0])\n    end_min = min(interval1[1], interval2[1])\n    if start_max > end_min:\n        return \"NO\"\n    intersection_length = end_min - start_max + 1\n    if intersection_length <= 0:\n        return \"NO\"\n    return \"YES\" if is_prime(intersection_length) else \"NO\"",
  "HumanEval/128": "    if not arr:\n        return None\n    sign_product = 1\n    magnitude_sum = 0\n    for num in arr:\n        if num > 0:\n            sign_product *= 1\n        elif num < 0:\n            sign_product *= -1\n        else:\n            sign_product *= 0\n        magnitude_sum += abs(num)\n    return magnitude_sum * sign_product\n",
  "HumanEval/129": "    N = len(grid)\n    min_path = []\n    min_path_val = float('inf')\n\n    def dfs(x, y, path, visited):\n        if len(path) == k:\n            nonlocal min_path, min_path_val\n            path_val = ''.join(map(str, path))\n            if int(path_val) < min_path_val:\n                min_path_val = int(path_val)\n                min_path = path.copy()\n            return\n\n        for dx, dy in [(0, 1), (1, 0), (-1, 0), (0, -1)]:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < N and 0 <= ny < N and (nx, ny) not in visited:\n                visited.add((nx, ny))\n                dfs(nx, ny, path + [grid[nx][ny]], visited)\n                visited.remove((nx, ny))\n\n    for i in range(N):\n        for j in range(N):\n            dfs(i, j, [grid[i][j]], {(i, j)})\n\n    return min_path",
  "HumanEval/130": "    # Correcting the approach based on the problem statement\n    # Initialize the list with the first three known values\n    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1, 3, 2]\n\n    tribonacci = [1, 3, 2]\n    # Adjusting the loop to correctly calculate the sequence\n    for i in range(3, n + 1):\n        if i % 2 == 0:\n            tribonacci.append(1 + i // 2)\n        else:\n            # For odd n, the recurrence relation needs to be correctly applied\n            # The given relation in the prompt seems incorrect as it involves tri(n+1) which leads to a forward reference\n            # Assuming a typo and adjusting the relation to not use tri(n+1)\n            tribonacci.append(tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i - 3])\n\n    return tribonacci",
  "HumanEval/131": "    product = 1\n    has_odd = False\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n            has_odd = True\n        n //= 10\n    return product if has_odd else 0\n",
  "HumanEval/132": "def is_nested(string):\n    # Initialize a counter for open brackets\n    open_brackets = 0\n    # Initialize a flag for detecting nested brackets\n    nested = False\n\n    for char in string:\n        if char == '[':\n            open_brackets += 1\n        elif char == ']':\n            if open_brackets > 1:\n                nested = True\n            if open_brackets > 0:\n                open_brackets -= 1\n            else:\n                # If there are more closing brackets than opening, it's not valid\n                return False\n\n    # For the string to be nested, there must be at least one instance of nesting\n    # and all brackets must be closed\n    return nested and open_brackets == 0",
  "HumanEval/133": "    import math\n    return sum(math.ceil(x)**2 for x in lst)",
  "HumanEval/134": "    # Strip trailing spaces\n    txt = txt.rstrip()\n    # Check if the string is empty or if the last character is not a letter\n    if not txt or not txt[-1].isalpha():\n        return False\n    # Check if the second last character is a space (indicating the last character is not part of a word) or if the text length is 1\n    if len(txt) == 1 or txt[-2] == ' ':\n        return True\n    return False",
  "HumanEval/135": "    for i in range(len(arr)-1, 0, -1):\n        if arr[i] < arr[i-1]:\n            return i\n    return -1",
  "HumanEval/136": "    largest_negative = None\n    smallest_positive = None\n    for num in lst:\n        if num < 0:\n            if largest_negative is None or num > largest_negative:\n                largest_negative = num\n        elif num > 0:\n            if smallest_positive is None or num < smallest_positive:\n                smallest_positive = num\n    return (largest_negative, smallest_positive)",
  "HumanEval/137": "    # Convert inputs to float for comparison, handling both . and , as decimal points\n    def to_float(x):\n        if isinstance(x, str):\n            x = x.replace(',', '.')\n        return float(x)\n\n    a_float = to_float(a)\n    b_float = to_float(b)\n\n    # Compare the float values\n    if a_float > b_float:\n        return a\n    elif b_float > a_float:\n        return b\n    else:\n        return None\n",
  "HumanEval/138": "    # Since the smallest sum of 4 positive even numbers is 2+2+2+2=8,\n    # any number less than 8 cannot be written as such a sum.\n    if n < 8:\n        return False\n    # For any number n >= 8, if it's even, it can be written as the sum of 4 even numbers.\n    # This is because we can always use 2, 2, 2, and (n-6) when n > 8 and is even.\n    # When n = 8, it's obviously 2+2+2+2.\n    return n % 2 == 0",
  "HumanEval/139": "    def factorial(x):\n        if x == 0:\n            return 1\n        else:\n            return x * factorial(x-1)\n\n    result = 1\n    for i in range(1, n+1):\n        result *= factorial(i)\n    return result",
  "HumanEval/140": "    import re\n    # Replace more than 2 consecutive spaces with '-'\n    text = re.sub(r' {3,}', '-', text)\n    # Replace all remaining spaces with '_'\n    text = text.replace(' ', '_')\n    return text\n",
  "HumanEval/141": "    import re\n    # Check for more than three digits\n    if len(re.findall(r'\\d', file_name)) > 3:\n        return 'No'\n    # Check for exactly one dot and valid extension\n    if len(file_name.split('.')) != 2 or file_name.split('.')[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    # Check if the substring before the dot starts with a letter and is not empty\n    if not re.match(r'^[a-zA-Z]', file_name.split('.')[0]):\n        return 'No'\n    return 'Yes'",
  "HumanEval/142": "    return sum([x**3 if i % 4 == 0 and i % 3 != 0 else x**2 if i % 3 == 0 else x for i, x in enumerate(lst)])",
  "HumanEval/143": "    def is_prime(n: int) -> bool:\n        \"\"\"Check if a number is a prime number.\"\"\"\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    # Split the sentence into words\n    words = sentence.split()\n\n    # Filter words where the length is a prime number\n    prime_length_words = [word for word in words if is_prime(len(word))]\n\n    # Join the filtered words back into a sentence\n    return ' '.join(prime_length_words)",
  "HumanEval/144": "    # Split the fractions into numerator and denominator\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n\n    # Multiply the numerators and denominators\n    result_num = x_num * n_num\n    result_den = x_den * n_den\n\n    # Check if the result is a whole number\n    return result_num % result_den == 0\n",
  "HumanEval/145": "    # Calculate the sum of digits for each number\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(abs(n)))\n\n    # Sort the numbers based on the sum of their digits\n    # In case of a tie, the original order is preserved by using enumerate to keep track of the original index\n    sorted_nums = sorted(enumerate(nums), key=lambda x: (sum_of_digits(x[1]), x[0]))\n    # Extract the numbers from the sorted tuples\n    return [num for _, num in sorted_nums]",
  "HumanEval/146": "    def is_odd_and_greater_than_10(n):\n        str_n = str(abs(n))\n        return int(str_n[0]) % 2 != 0 and int(str_n[-1]) % 2 != 0 and n > 10\n\n    return sum(is_odd_and_greater_than_10(num) for num in nums)\n",
  "HumanEval/147": "    # Create the array as per the given formula\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n\n    # Initialize count of valid triples\n    count = 0\n\n    # Check all combinations of triples for the condition\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n\n    return count\n",
  "HumanEval/148": "    planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    start, end = sorted([planets.index(planet1), planets.index(planet2)])\n    return tuple(planets[start+1:end])",
  "HumanEval/149": "    # Filter out strings with odd lengths\n    filtered_lst = [s for s in lst if len(s) % 2 == 0]\n    # Sort the list first alphabetically, then by length\n    sorted_lst = sorted(filtered_lst, key=lambda x: (len(x), x))\n    return sorted_lst",
  "HumanEval/150": "    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n    return x if is_prime(n) else y\n",
  "HumanEval/151": "    return sum(x**2 for x in lst if isinstance(x, int) and x > 0 and x % 2 != 0)",
  "HumanEval/152": "    return [abs(g - s) for g, s in zip(guess, game)]",
  "HumanEval/153": "    def strength(extension):\n        CAP = sum(1 for c in extension if c.isupper())\n        SM = sum(1 for c in extension if c.islower())\n        return CAP - SM\n\n    strongest_extension = max(extensions, key=strength)\n    return f'{class_name}.{strongest_extension}'\n",
  "HumanEval/154": "    for i in range(len(b)):\n        rotated_b = b[i:] + b[:i]\n        if rotated_b in a:\n            return True\n    return False",
  "HumanEval/155": "    num_str = str(abs(num))\n    even_count = 0\n    odd_count = 0\n    for digit in num_str:\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)",
  "HumanEval/156": "    # Define the Roman numeral symbols\n    roman_numerals = {\n        1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l',\n        90: 'xc', 100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'\n    }\n    # Create a list of the numbers in descending order\n    keys = sorted(roman_numerals.keys(), reverse=True)\n    roman_string = ''\n    # Convert the number to Roman numeral\n    for key in keys:\n        while number >= key:\n            roman_string += roman_numerals[key]\n            number -= key\n    return roman_string",
  "HumanEval/157": "    # Sort the sides to ensure the longest side is last\n    sides = sorted([a, b, c])\n    # Check if the square of the longest side is equal to the sum of the squares of the other two sides\n    return sides[0]**2 + sides[1]**2 == sides[2]**2\n",
  "HumanEval/158": "    # Initialize variables to store the word with maximum unique characters and its count\n    max_unique_chars = 0\n    max_word = ''\n    \n    for word in words:\n        # Calculate the number of unique characters in the current word\n        unique_chars = len(set(word))\n        # Update max_unique_chars and max_word if this word has more unique characters\n        # or the same number but comes first lexicographically\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_unique_chars = unique_chars\n            max_word = word\n    \n    return max_word",
  "HumanEval/159": "    # Calculate the total carrots that can be eaten\n    can_eat = min(need, remaining)\n    # Update the number of eaten and remaining carrots\n    total_eaten = number + can_eat\n    left_over = remaining - can_eat\n    return [total_eaten, left_over]",
  "HumanEval/160": "    # Initialize the expression with the first operand\n    expression = str(operand[0])\n    # Build the expression string\n    for op, val in zip(operator, operand[1:]):\n        expression += f' {op} {val}'\n    # Evaluate the expression\n    return eval(expression)",
  "HumanEval/161": "    if not any(c.isalpha() for c in s):\n        return s[::-1]\n    else:\n        return ''.join(c.swapcase() if c.isalpha() else c for c in s)",
  "HumanEval/162": "    import hashlib\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()",
  "HumanEval/163": "    if a > b:\n        a, b = b, a\n    return [x for x in range(a, b + 1) if x % 2 == 0]"
}