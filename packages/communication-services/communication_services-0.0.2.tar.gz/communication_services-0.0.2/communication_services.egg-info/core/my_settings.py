"""
Django settings for communication project.

Generated by 'django-admin startproject' using Django 4.0.3.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

from pathlib import Path
import os
from urllib.parse import urlparse
from corsheaders.defaults import default_headers


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-s%1(lt!5$0xnzr%%l0!v$@cem2(74ofh4!&65n#b82$pojxbwo'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_filters',
    'rest_framework',
    "rest_framework.authtoken",
    'corsheaders',
    'apps.authsystem.apps.AuthsystemConfig',
    'apps.utils.apps.UtilsConfig',
    'apps.communication.apps.CommunicationConfig',
    'rest_framework_swagger',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # 'apps.authsystem.middelware.authentication_middleware.ApiKeyMiddleware'
]

ROOT_URLCONF = 'core.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]



WSGI_APPLICATION = 'core.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators


AUTH_PASSWORD_VALIDATORS = [
    # {
    #     'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    # },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    # {
    #     'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    # },
    # {
    #     'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    # },
]


# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/


LANGUAGE_CODE = "en-us"
TIME_ZONE = "UTC"
USE_I18N = True
USE_L10N = True
USE_TZ = True
STATIC_URL = "/static/"
STATIC_ROOT = "static/"
REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework.authentication.TokenAuthentication",
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    "TEST_REQUEST_DEFAULT_FORMAT": "json",
    "DEFAULT_PAGINATION_CLASS": "apps.utils.helpers.CustomPaginationClass",
    "PAGE_SIZE": 300,
    "COERCE_DECIMAL_TO_STRING": True,
}


# LOGGING = {
#     "version": 1,
#     "disable_existing_loggers": False,
#     "formatters": {
#         "verbose": {
#             "format": "{levelname} {asctime} {filename}/{funcName} {message}",
#             "style": "{",
#             "datefmt": "%d/%m/%y %I:%M:%S %p",
#         },
#     },
#     "handlers": {
#         "info": {
#             "level": "DEBUG",
#             "class": "logging.FileHandler",
#             "filename": "info.log",
#             "formatter": "verbose",
#             "filters": ["info-logger-filter"],
#         },
#         "database_queries": {
#             "level": "DEBUG",
#             "class": "logging.FileHandler",
#             "filename": "/dev/null",
#         },
#         "null": {"class": "logging.NullHandler"},
#         "error": {
#             "level": "ERROR",
#             "class": "logging.FileHandler",
#             "filename": "error.log",
#             "formatter": "verbose",
#         },
#     },
#     "loggers": {
#         "django.db.backends": {
#             "handlers": ["database_queries"],
#             "level": "DEBUG",
#             "propagate": False,
#         },
#         "django.security.DisallowedHost": {
#             "handlers": ["null"],
#             "propagate": False,
#         },
#         "authsystem": {
#             "handlers": ["info", "error"],
#             "propagate": False,
#             "level": "DEBUG",
#         },
#         "utils": {"handlers": ["info", "error"], "propagate": False, "level": "DEBUG"},
#         "communication": {"handlers": ["info", "error"], "propagate": False, "level": "DEBUG"},
#     },
# }


AWS_DEFAULT_ACL = None
AWS_BUCKET_ACL = None
AWS_STORAGE_BUCKET_NAME = os.environ.get("AWS_STORAGE_BUCKET_NAME", "navid-bucket")
AWS_ACCESS_KEY_ID = os.environ.get("AWS_ACCESS_KEY_ID")
AWS_SECRET_ACCESS_KEY = os.environ.get("AWS_SECRET_ACCESS_KEY")
AWS_S3_FILE_OVERWRITE = False
AWS_S3_ENDPOINT_URL = os.environ.get("AWS_S3_ENDPOINT_URL")
AWS_S3_REGION_NAME = os.environ.get("AWS_S3_REGION_NAME")
AWS_DEFAULT_ACL = os.environ.get("AWS_DEFAULT_ACL")
AWS_QUERYSTRING_AUTH = os.environ.get("AWS_QUERYSTRING_AUTH")

if os.environ.get("isProd", False):
    STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"
    database_url = urlparse(os.environ.get("DATABASE_URL"))

    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.postgresql",
            "NAME": database_url.path[1:],
            "USER": database_url.username,
            "PASSWORD": database_url.password,
            "HOST": database_url.hostname,
            "PORT": database_url.port,
        }
    }

CORS_ORIGIN_ALLOW_ALL = True
CORS_ALLOW_HEADERS = list(default_headers) + ["userid", "isResponseJson", "key"]

# by setting this value, djnago is_sequre method will return True if the request had header `HTTP_X_FORWARDED_PROTO: https`. in our case our proxy (nginx) sets this header so djnago recognize sequre requests if client calls django via https.sequring requests have many benefits such as DRF makes pagination links as https.
SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")

AUTH_USER_MODEL = "authsystem.User"

KAVENEGAR_SENDER_KEY = os.environ.get("KAVENEGAR_SENDER_KEY", "10004346")
KAVENEGAR_APIKEY = os.environ.get("KAVENEGAR_APIKEY", "somesecret")


SWAGGER_SETTINGS = {
    'SECURITY_DEFINITIONS': {
        'api_key': {
            'type': 'apiKey',
            'in': 'header',
            'name': 'Authorization'
        }
    },
}


#=========================================================
#=========================================================
#============                             ================
#============    Communication Service    ================
#============                             ================
#=========================================================
#=========================================================


#=== Config Celery an RabbitMQ
# 'amqp://notify_broker:notify_broker@localhost'
CELERY_BROKER_URL = os.environ.get('CELERY_BROKER_URL')
# Optional: Set result backend (if needed)
# CELERY_RESULT_BACKEND = 'rpc://'


#==== Config For Send Email
# Email Backend Configuration
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'

# SMTP Server Settings (Replace with your SMTP server details)
EMAIL_HOST = os.environ.get("EMAIL_HOST") # 'smtp.gmail.com'
EMAIL_PORT = os.environ.get("EMAIL_PORT") # 587  # or the appropriate port for your SMTP server
EMAIL_USE_TLS = os.environ.get("EMAIL_USE_TLS") #True  # Enable TLS encryption (recommended)
EMAIL_HOST_USER = os.environ.get("EMAIL_HOST_USER")
EMAIL_HOST_PASSWORD = os.environ.get("EMAIL_HOST_PASSWORD")

# Default Email From Address
DEFAULT_FROM_EMAIL = os.environ.get("EMAIL_HOST_USER")


#Config Twilio SMS Services
TWILIO_ACCOUNT_SID = os.environ.get("TWILIO_ACCOUNT_SID")
TWILIO_AUTH_TOKEN = os.environ.get("TWILIO_AUTH_TOKEN")
TWILIO_PHONE_NUMBER =os.environ.get("TWILIO_PHONE_NUMBER")
TWILIO_VERIFY_SID=os.environ.get("TWILIO_VERIFY_SID")

#config firebase push notification
import firebase_admin
from firebase_admin import credentials

#url cred exp: path/to/service-account-key.json
cred = credentials.Certificate(os.environ.get("FIREBASE_URL_CRED")) #'path/to/service-account-key.json')
firebase_admin.initialize_app(cred)