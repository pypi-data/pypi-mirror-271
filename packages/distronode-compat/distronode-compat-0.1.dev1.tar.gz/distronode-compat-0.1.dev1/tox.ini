[tox]
minversion = 4.0.0
envlist =
  lint
  pkg
  docs
  # matrix assumed current (implicit) is 2.13:
  py{39,310,311}{,-devel,-distronode212,-distronode213,-distronode214,-distronode215}
isolated_build = true
skip_missing_interpreters = True
requires =
  tox >= 4.6.3
  setuptools >= 65.3.0 # editable installs

[testenv]
description =
  Run the tests with {basepython}
  devel: distronode devel branch
  distronode212: distronode-core 2.12
  distronode213: distronode-core 2.13
  distronode214: distronode-core 2.14
  distronode215: distronode-core 2.15

deps =
  distronode212: distronode-core>=2.12,<2.13
  distronode213: distronode-core>=2.13,<2.14
  distronode214: distronode-core>=2.14,<2.15
  distronode215: distronode-core>=2.15,<2.16

  devel: distronode-core @ git+https://github.com/distronode/distronode.git@c5d18c39d81e2b3b10856b2fb76747230e4fac4a  # GPLv3+
  # avoid installing distronode-core on -devel envs:
  !devel: distronode-core
extras =
  test

commands =
  sh -c "distronode --version | head -n 1"
  # We add coverage options but not making them mandatory as we do not want to force
  # pytest users to run coverage when they just want to run a single test with `pytest -k test`
  coverage run -m pytest {posargs:}
  sh -c "coverage combine -a -q --data-file=.coverage {toxworkdir}/.coverage.*"
  # needed for upload to codecov.io
  -sh -c "COVERAGE_FILE= coverage xml --ignore-errors -q --fail-under=0"
  # needed for vscode integration due to https://github.com/ryanluker/vscode-coverage-gutters/issues/403
  -sh -c "COVERAGE_FILE= coverage lcov --ignore-errors -q --fail-under=0"
  sh -c "COVERAGE_FILE= coverage report"
  # We fail if files are modified at the end
  git diff --exit-code

commands_pre =
  # safety measure to assure we do not accidentally run tests with broken dependencies
  {envpython} -m pip check
  # cleaning needed to prevent errors between runs
  sh -c "rm -f .coverage {toxworkdir}/.coverage.* 2>/dev/null || true"
passenv =
  CURL_CA_BUNDLE  # https proxies, https://github.com/tox-dev/tox/issues/1437
  FORCE_COLOR
  HOME
  NO_COLOR
  PYTEST_*  # allows developer to define their own preferences
  PY_COLORS
  REQUESTS_CA_BUNDLE  # https proxies
  SSL_CERT_FILE  # https proxies
  LANG
  LC_ALL
  LC_CTYPE
setenv =
  DISTRONODE_DEVEL_WARNING='false'
  COVERAGE_FILE = {env:COVERAGE_FILE:{toxworkdir}/.coverage.{envname}}
  COVERAGE_PROCESS_START={toxinidir}/pyproject.toml
  PIP_DISABLE_PIP_VERSION_CHECK = 1
  PIP_CONSTRAINT = {toxinidir}/requirements.txt
  PRE_COMMIT_COLOR = always
  PYTEST_REQPASS = 91
  FORCE_COLOR = 1
allowlist_externals =
  distronode
  git
  sh
# https://tox.wiki/en/latest/upgrading.html#editable-mode
package = editable

[testenv:lint]
description = Run all linters
# locked basepython is needed because to keep constrains.txt predictable
basepython = python3.9
deps =
  pre-commit>=2.6.0
skip_install = true
usedevelop = false
commands =
  pre-commit run -a --show-diff-on-failure {posargs:}
  pre-commit run -a pip-compile
passenv =
  {[testenv]passenv}
  PRE_COMMIT_HOME
setenv =
  {[testenv]setenv}
  PIP_CONSTRAINT = /dev/null

[testenv:deps]
description = Bump all test dependencies
basepython = {[testenv:lint]basepython}
envdir = {toxworkdir}/lint
deps = {[testenv:lint]deps}
skip_install = true
commands =
  pre-commit run -a --hook-stage manual pip-compile-upgrade
  {[testenv:lint]commands}
setenv =
  {[testenv]setenv}
  PIP_CONSTRAINT = /dev/null

[testenv:pkg]
description =
  Build package, verify metadata, install package and assert behavior when distronode is missing.
deps =
  build >= 0.9.0
  twine >= 4.0.1
skip_install = true
# Ref: https://twitter.com/di_codes/status/1044358639081975813
commands =
  # build wheel and sdist using PEP-517
  {envpython} -c 'import os.path, shutil, sys; \
  dist_dir = os.path.join("{toxinidir}", "dist"); \
  os.path.isdir(dist_dir) or sys.exit(0); \
  print("Removing \{!s\} contents...".format(dist_dir), file=sys.stderr); \
  shutil.rmtree(dist_dir)'
  {envpython} -m build \
    --outdir {toxinidir}/dist/ \
    {toxinidir}
  # Validate metadata using twine
  twine check --strict {toxinidir}/dist/*
  # Install the wheel
  sh -c "python3 -m pip install {toxinidir}/dist/*.whl"
  pip uninstall -y distronode-compat

[testenv:py]
description = Run the tests with {basepython} distronode-core 2.12+
deps =
  {[testenv]deps}
  distronode-core>=2.12

[testenv:rpm]
description = Use packit to build RPM (requires RPM based Linux distro)
deps =
  packitos
commands =
  packit build in-mock

[testenv:docs]
description = Build docs
commands =
  mkdocs {posargs:build} --strict
extras = docs
passenv = *

[testenv:smoke]
description = Run distronode-lint own testing with current code from compat library
commands_pre =
  distronode localhost -m distronode.builtin.git -a 'repo=https://github.com/distronode/distronode-lint dest={envdir}/tmp/distronode-lint'
  pip install -e "{envdir}/tmp/distronode-lint[test]"
commands =
  bash -c "pip freeze|grep distronode"
  pytest -k role
deps =
  distronode-core
setenv =
  {[testenv]setenv}
  PIP_CONSTRAINT = /dev/null
  PYTEST_REQPASS = 0
changedir = {envdir}/tmp/distronode-lint
allowlist_externals =
  pwd
  bash
