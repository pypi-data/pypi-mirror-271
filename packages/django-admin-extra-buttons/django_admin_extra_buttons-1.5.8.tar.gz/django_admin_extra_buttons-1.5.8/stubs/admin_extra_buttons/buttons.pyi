from _typeshed import Incomplete
from admin_extra_buttons.utils import check_permission as check_permission, get_preserved_filters as get_preserved_filters, labelize as labelize
from collections.abc import Generator
from django.template import RequestContext as RequestContext, Template as Template

class Button:
    default_change_form_arguments: int
    default_template: str
    label: Incomplete
    url_pattern: Incomplete
    href: Incomplete
    config: Incomplete
    handler: Incomplete
    template: Incomplete
    context: Incomplete
    disable_on_click: bool
    disable_on_edit: bool
    change_form: Incomplete
    change_list: Incomplete
    def __init__(self, handler, context, label: Incomplete | None = None, visible: bool = True, enabled: bool = True, change_form: Incomplete | None = None, change_list: Incomplete | None = None, template: Incomplete | None = None, **config) -> None: ...
    def get_change_form_flag(self, arg): ...
    def get_change_list_flag(self, arg): ...
    @property
    def html_attrs(self): ...
    def can_render(self): ...
    @property
    def enabled(self): ...
    @property
    def model_admin(self): ...
    @property
    def admin_site(self): ...
    @property
    def visible(self): ...
    @visible.setter
    def visible(self, value) -> None: ...
    @property
    def request(self): ...
    @property
    def original(self): ...
    def authorized(self): ...
    @property
    def url(self): ...
    def get_url(self, context): ...

class LinkButton(Button):
    @property
    def url(self): ...
    def get_change_form_flag(self, arg): ...
    def get_change_list_flag(self, arg): ...

class ChoiceButton(LinkButton):
    default_template: str
    def get_choices(self) -> Generator[Incomplete, None, Incomplete]: ...
    def can_render(self): ...
    @property
    def html_attrs(self): ...
