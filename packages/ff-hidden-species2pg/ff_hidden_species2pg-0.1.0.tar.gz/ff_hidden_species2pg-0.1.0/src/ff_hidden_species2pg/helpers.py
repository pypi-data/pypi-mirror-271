"""CLI app helpers functions"""

import datetime
import re
from typing import List, Optional
from urllib.parse import parse_qs, urlparse

import click
import psycopg2
import requests
from bs4 import BeautifulSoup

MONTHES = {
    "janvier": 1,
    "février": 2,
    "mars": 3,
    "avril": 4,
    "mai": 5,
    "juin": 6,
    "juillet": 7,
    "août": 8,
    "septembre": 9,
    "octobre": 10,
    "novembre": 11,
    "décembre": 12,
}

MESSAGE_COLOR = {"info": "blue", "success": "green", "error": "red", "warning": "yellow"}


def cli_message(message: str, color: str):
    """Generate click message"""
    return click.echo(click.style(message, fg=(MESSAGE_COLOR[color] or color)))


def rmpt(txt: str) -> str:
    """Remove point character

    Args:
        txt (str): String to replace point

    Returns:
        str: cleaned string
    """
    return txt.replace(".", "")


def create_table(conn_string: str, drop_table: bool = False) -> None:
    """Create table in database"""
    conn = psycopg2.connect(conn_string)
    cur = conn.cursor()
    cli_message("Create table src_lpodatas.t_c_visionature_hidding_rules", "info")
    if drop_table:
        if click.confirm(
            """Are you sure you want to delete 'src_lpodatas.t_c_visionature_hidding_rules'?
            All current data will be definitively lost!"""
        ):
            cur.execute(
                """
                DROP TABLE IF EXISTS src_lpodatas.t_c_visionature_hidding_rules;
                """
            )
    create_table_query = """
    CREATE TABLE IF NOT EXISTS src_lpodatas.t_c_visionature_hidding_rules
    (
        id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
        cd_nom INTEGER references taxonomie.taxref(cd_nom),
        french_name varchar,
        sci_name varchar,
        all_time_restriction bool,
        periodic_restriction bool,
        restriction_atlas_min_code int,
        restriction_start_day int,
        restriction_start_month int,
        restriction_end_day int,
        restriction_end_month int,
        timestamp_create TIMESTAMP default now(),
        timestamp_update TIMESTAMP default now(),
        CONSTRAINT unique_cd_nom UNIQUE(cd_nom));
    """

    cur.execute(create_table_query)
    conn.commit()
    cur.close()
    conn.close()
    cli_message("Table created", "success")


def list_tags() -> List[int]:
    """List species group ids"""
    r = requests.get("https://www.faune-france.org/index.php?m_id=156", timeout=5)
    soup = BeautifulSoup(r.content, "html.parser")
    links = soup.find_all("a", "bvMenuSub")
    tags = [
        1,
    ]
    for item in links:
        link = item.get("href")
        parsed_url = urlparse(link)
        query = parse_qs(parsed_url.query)
        tags.append(int(query["sp_tg"][0]))
    return tags


def get_cdnom(sci_name: str) -> Optional[int]:
    """_summary_

    Args:
        sci_name (str): _description_

    Returns:
        Optional[int]: _description_
    """
    url = f"https://taxref.mnhn.fr/api/taxa/fuzzyMatch?term={sci_name}"
    resp = requests.get(url, timeout=10)
    json_resp = resp.json()
    if "_embedded" in json_resp:
        cd_nom = json_resp["_embedded"]["taxa"][0]["id"]
        return cd_nom
    cli_message(f"No matching value found in taxref for {sci_name}", "warning")
    return None


def get_line_data(line: "BeautifulSoup") -> Optional[dict]:
    """Get and parse species informations

    Args:
        line (BeautifulSoup) : html div line

    Returns:
        Optional[dict]: _description_
    """

    divs = line.find_all("div")
    data = {}
    # print(line.find_all('div'))
    if divs[0].find("b"):

        data["french_name"] = divs[0].find("b").get_text().replace("'", "''")
        data["sci_name"] = re.sub(
            "[()]", "", (divs[0].find("span") or divs[0].find("i")).get_text()
        )
        data["cd_nom"] = get_cdnom(data["sci_name"])
        restriction = divs[1].get_text()
        data["all_time_restriction"] = restriction.startswith(
            "restriction de publication totale en tout temps"
        )
        data["periodic_restriction"] = "restriction de publication partielle" in restriction

        restriction_split = restriction.split()
        le_pos = [i for i, x in enumerate(restriction.split()) if x == "le"]
        data["restriction_start_day"] = rmpt(restriction_split[le_pos[0] + 1]) if le_pos else None
        data["restriction_start_month"] = (
            MONTHES[rmpt(restriction_split[le_pos[0] + 2].replace(".", ""))] if le_pos else None
        )
        data["restriction_end_day"] = rmpt(restriction_split[le_pos[1] + 1]) if le_pos else None
        data["restriction_end_month"] = (
            MONTHES[rmpt(restriction_split[le_pos[1] + 2].replace(".", ""))] if le_pos else None
        )
        data["restriction_atlas_min_code"] = (
            restriction_split[(restriction_split.index("atlas") + 3) :][0]  # noqa: E203
            if "atlas" in restriction_split
            else None
        )

    return data


def do_flush_table(cur) -> None:
    """Flush table in database"""
    if click.confirm(
        """Are you sure you want to flush table 'src_lpodatas.t_c_visionature_hidding_rules'?
            All current data will be definitively lost!"""
    ):
        cur.execute("TRUNCATE src_lpodatas.t_c_visionature_hidding_rules RESTART IDENTITY;")


def insert_data(conn_string: str, flush_table: bool = False) -> None:
    """Insert data in database"""
    items = []
    conn = psycopg2.connect(conn_string)
    cur = conn.cursor()

    for tag in list_tags():
        cli_message(f"download data for tag {tag}", "info")
        r = requests.get(
            f"https://www.faune-france.org/index.php?m_id=156&&sp_tg={tag}", timeout=5
        )
        soup = BeautifulSoup(r.content, "html.parser")
        all_rows = soup.find_all("div", "row")
        with click.progressbar(all_rows) as pbar:
            for line in pbar:
                items.append(get_line_data(line))
    if flush_table:
        do_flush_table(cur)

    current_ts = datetime.datetime.now().strftime("%Y-%m-%d %H:%M")
    cli_message("INSERT values into table src_lpodatas.t_c_visionature_hidding_rules", "info")
    with click.progressbar(items) as pbar:
        for data in pbar:
            if data:
                try:
                    # cli_message(
                    #     f"insert data for taxa {data['french_name']} ({data['sci_name']})", "info"
                    # )
                    # cli_message(str(data), "warning")
                    cur.execute(
                        f"""
                INSERT INTO src_lpodatas.t_c_visionature_hidding_rules (
                    cd_nom,
                    french_name,
                    sci_name,
                    all_time_restriction,
                    periodic_restriction,
                    restriction_atlas_min_code,
                    restriction_start_day,
                    restriction_start_month,
                    restriction_end_day,
                    restriction_end_month,
                    timestamp_update
                ) VALUES (
                    {data['cd_nom'] or 'NULL'},
                    '{data['french_name']}',
                    '{data['sci_name']}',
                    '{data['all_time_restriction']}',
                    {data['periodic_restriction']},
                    {data['restriction_atlas_min_code'] or 'NULL'},
                    {data['restriction_start_day'] or 'NULL'},
                    {data['restriction_start_month'] or 'NULL'},
                    {data['restriction_end_day'] or 'NULL'},
                    {data['restriction_end_month'] or 'NULL'},
                    '{current_ts}'
                    )
                        ON CONFLICT (cd_nom) DO NOTHING; """,
                    )

                except Exception as e:
                    cli_message(f"An error occured during insert : {str(e)}", "error")
                    raise ValueError(str(e)) from e
    conn.commit()
    cur.close()
    conn.close()
    cli_message("Database connection is now closed", "success")
