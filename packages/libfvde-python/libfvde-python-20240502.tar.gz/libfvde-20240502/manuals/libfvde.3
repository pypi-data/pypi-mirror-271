.Dd January 19, 2022
.Dt libfvde 3
.Os libfvde
.Sh NAME
.Nm libfvde.h
.Nd Library to access the FileVault Drive Encryption (FVDE) format
.Sh SYNOPSIS
.In libfvde.h
.Pp
Support functions
.Ft const char *
.Fn libfvde_get_version "void"
.Ft int
.Fn libfvde_get_access_flags_read "void"
.Ft int
.Fn libfvde_get_codepage "int *codepage" "libfvde_error_t **error"
.Ft int
.Fn libfvde_set_codepage "int codepage" "libfvde_error_t **error"
.Ft int
.Fn libfvde_check_volume_signature "const char *filename" "libfvde_error_t **error"
.Pp
Available when compiled with wide character string support:
.Ft int
.Fn libfvde_check_volume_signature_wide "const wchar_t *filename" "libfvde_error_t **error"
.Pp
Available when compiled with libbfio support:
.Ft int
.Fn libfvde_check_volume_signature_file_io_handle "libbfio_handle_t *file_io_handle" "libfvde_error_t **error"
.Pp
Notify functions
.Ft void
.Fn libfvde_notify_set_verbose "int verbose"
.Ft int
.Fn libfvde_notify_set_stream "FILE *stream" "libfvde_error_t **error"
.Ft int
.Fn libfvde_notify_stream_open "const char *filename" "libfvde_error_t **error"
.Ft int
.Fn libfvde_notify_stream_close "libfvde_error_t **error"
.Pp
Error functions
.Ft void
.Fn libfvde_error_free "libfvde_error_t **error"
.Ft int
.Fn libfvde_error_fprint "libfvde_error_t *error" "FILE *stream"
.Ft int
.Fn libfvde_error_sprint "libfvde_error_t *error" "char *string" "size_t size"
.Ft int
.Fn libfvde_error_backtrace_fprint "libfvde_error_t *error" "FILE *stream"
.Ft int
.Fn libfvde_error_backtrace_sprint "libfvde_error_t *error" "char *string" "size_t size"
.Pp
Volume functions
.Ft int
.Fn libfvde_volume_initialize "libfvde_volume_t **volume" "libfvde_error_t **error"
.Ft int
.Fn libfvde_volume_free "libfvde_volume_t **volume" "libfvde_error_t **error"
.Ft int
.Fn libfvde_volume_signal_abort "libfvde_volume_t *volume" "libfvde_error_t **error"
.Ft int
.Fn libfvde_volume_open "libfvde_volume_t *volume" "const char *filename" "int access_flags" "libfvde_error_t **error"
.Ft int
.Fn libfvde_volume_open_physical_volume_files "libfvde_volume_t *volume" "char * const filenames[]" "int number_of_filenames" "libfvde_error_t **error"
.Ft int
.Fn libfvde_volume_close "libfvde_volume_t *volume" "libfvde_error_t **error"
.Ft int
.Fn libfvde_volume_read_encrypted_root_plist "libfvde_volume_t *volume" "const char *filename" "libfvde_error_t **error"
.Ft int
.Fn libfvde_volume_get_volume_group "libfvde_volume_t *volume" "libfvde_volume_group_t **volume_group" "libfvde_error_t **error"
.Pp
Available when compiled with wide character string support:
.Ft int
.Fn libfvde_volume_open_wide "libfvde_volume_t *volume" "const wchar_t *filename" "int access_flags" "libfvde_error_t **error"
.Ft int
.Fn libfvde_volume_open_physical_volume_files_wide "libfvde_volume_t *volume" "wchar_t * const filenames[]" "int number_of_filenames" "libfvde_error_t **error"
.Ft int
.Fn libfvde_volume_read_encrypted_root_plist_wide "libfvde_volume_t *volume" "const wchar_t *filename" "libfvde_error_t **error"
.Pp
Available when compiled with libbfio support:
.Ft int
.Fn libfvde_volume_open_file_io_handle "libfvde_volume_t *volume" "libbfio_handle_t *file_io_handle" "int access_flags" "libfvde_error_t **error"
.Ft int
.Fn libfvde_volume_open_physical_volume_files_file_io_pool "libfvde_volume_t *volume" "libbfio_pool_t *file_io_pool" "libfvde_error_t **error"
.Ft int
.Fn libfvde_volume_read_encrypted_root_plist_file_io_handle "libfvde_volume_t *volume" "libbfio_handle_t *file_io_handle" "libfvde_error_t **error"
.Pp
Volume group functions
.Ft int
.Fn libfvde_volume_group_free "libfvde_volume_group_t **volume_group" "libfvde_error_t **error"
.Ft int
.Fn libfvde_volume_group_get_identifier "libfvde_volume_group_t *volume_group" "uint8_t *uuid_data" "size_t uuid_data_size" "libfvde_error_t **error"
.Ft int
.Fn libfvde_volume_group_get_utf8_name_size "libfvde_volume_group_t *volume_group" "size_t *utf8_string_size" "libfvde_error_t **error"
.Ft int
.Fn libfvde_volume_group_get_utf8_name "libfvde_volume_group_t *volume_group" "uint8_t *utf8_string" "size_t utf8_string_size" "libfvde_error_t **error"
.Ft int
.Fn libfvde_volume_group_get_utf16_name_size "libfvde_volume_group_t *volume_group" "size_t *utf16_string_size" "libfvde_error_t **error"
.Ft int
.Fn libfvde_volume_group_get_utf16_name "libfvde_volume_group_t *volume_group" "uint16_t *utf16_string" "size_t utf16_string_size" "libfvde_error_t **error"
.Ft int
.Fn libfvde_volume_group_get_number_of_physical_volumes "libfvde_volume_group_t *volume_group" "int *number_of_physical_volumes" "libfvde_error_t **error"
.Ft int
.Fn libfvde_volume_group_get_physical_volume_by_index "libfvde_volume_group_t *volume_group" "int volume_index" "libfvde_physical_volume_t **physical_volume" "libfvde_error_t **error"
.Ft int
.Fn libfvde_volume_group_get_number_of_logical_volumes "libfvde_volume_group_t *volume_group" "int *number_of_logical_volumes" "libfvde_error_t **error"
.Ft int
.Fn libfvde_volume_group_get_logical_volume_by_index "libfvde_volume_group_t *volume_group" "int volume_index" "libfvde_logical_volume_t **logical_volume" "libfvde_error_t **error"
.Pp
Physical volume functions
.Ft int
.Fn libfvde_physical_volume_free "libfvde_physical_volume_t **physical_volume" "libfvde_error_t **error"
.Ft int
.Fn libfvde_physical_volume_get_identifier "libfvde_physical_volume_t *physical_volume" "uint8_t *uuid_data" "size_t uuid_data_size" "libfvde_error_t **error"
.Ft int
.Fn libfvde_physical_volume_get_encryption_method "libfvde_physical_volume_t *physical_volume" "uint32_t *encryption_method" "libfvde_error_t **error"
.Ft int
.Fn libfvde_physical_volume_get_size "libfvde_physical_volume_t *physical_volume" "size64_t *size" "libfvde_error_t **error"
.Pp
Logical volume functions
.Ft int
.Fn libfvde_logical_volume_free "libfvde_logical_volume_t **logical_volume" "libfvde_error_t **error"
.Ft int
.Fn libfvde_logical_volume_unlock "libfvde_logical_volume_t *logical_volume" "libfvde_error_t **error"
.Ft ssize_t
.Fn libfvde_logical_volume_read_buffer "libfvde_logical_volume_t *logical_volume" "void *buffer" "size_t buffer_size" "libfvde_error_t **error"
.Ft ssize_t
.Fn libfvde_logical_volume_read_buffer_at_offset "libfvde_logical_volume_t *logical_volume" "void *buffer" "size_t buffer_size" "off64_t offset" "libfvde_error_t **error"
.Ft off64_t
.Fn libfvde_logical_volume_seek_offset "libfvde_logical_volume_t *logical_volume" "off64_t offset" "int whence" "libfvde_error_t **error"
.Ft int
.Fn libfvde_logical_volume_get_offset "libfvde_logical_volume_t *logical_volume" "off64_t *offset" "libfvde_error_t **error"
.Ft int
.Fn libfvde_logical_volume_get_identifier "libfvde_logical_volume_t *logical_volume" "uint8_t *uuid_data" "size_t uuid_data_size" "libfvde_error_t **error"
.Ft int
.Fn libfvde_logical_volume_get_utf8_name_size "libfvde_logical_volume_t *logical_volume" "size_t *utf8_string_size" "libfvde_error_t **error"
.Ft int
.Fn libfvde_logical_volume_get_utf8_name "libfvde_logical_volume_t *logical_volume" "uint8_t *utf8_string" "size_t utf8_string_size" "libfvde_error_t **error"
.Ft int
.Fn libfvde_logical_volume_get_utf16_name_size "libfvde_logical_volume_t *logical_volume" "size_t *utf16_string_size" "libfvde_error_t **error"
.Ft int
.Fn libfvde_logical_volume_get_utf16_name "libfvde_logical_volume_t *logical_volume" "uint16_t *utf16_string" "size_t utf16_string_size" "libfvde_error_t **error"
.Ft int
.Fn libfvde_logical_volume_get_size "libfvde_logical_volume_t *logical_volume" "size64_t *size" "libfvde_error_t **error"
.Ft int
.Fn libfvde_logical_volume_is_locked "libfvde_logical_volume_t *logical_volume" "libfvde_error_t **error"
.Ft int
.Fn libfvde_logical_volume_set_key "libfvde_logical_volume_t *logical_volume" "const uint8_t *volume_master_key" "size_t volume_master_key_size" "libfvde_error_t **error"
.Ft int
.Fn libfvde_logical_volume_set_utf8_password "libfvde_logical_volume_t *logical_volume" "const uint8_t *utf8_string" "size_t utf8_string_length" "libfvde_error_t **error"
.Ft int
.Fn libfvde_logical_volume_set_utf16_password "libfvde_logical_volume_t *logical_volume" "const uint16_t *utf16_string" "size_t utf16_string_length" "libfvde_error_t **error"
.Ft int
.Fn libfvde_logical_volume_set_utf8_recovery_password "libfvde_logical_volume_t *logical_volume" "const uint8_t *utf8_string" "size_t utf8_string_length" "libfvde_error_t **error"
.Ft int
.Fn libfvde_logical_volume_set_utf16_recovery_password "libfvde_logical_volume_t *logical_volume" "const uint16_t *utf16_string" "size_t utf16_string_length" "libfvde_error_t **error"
.Pp
LVF encryption context and EncryptedRoot.plist file functions
.Ft int
.Fn libfvde_encryption_context_plist_initialize "libfvde_encryption_context_plist_t **plist" "libfvde_error_t **error"
.Ft int
.Fn libfvde_encryption_context_plist_free "libfvde_encryption_context_plist_t **plist" "libfvde_error_t **error"
.Ft int
.Fn libfvde_encryption_context_plist_get_data_size "libfvde_encryption_context_plist_t *plist" "size64_t *data_size" "libfvde_error_t **error"
.Ft int
.Fn libfvde_encryption_context_plist_copy_data "libfvde_encryption_context_plist_t *plist" "uint8_t *data" "size_t data_size" "libfvde_error_t **error"
.Ft int
.Fn libfvde_encryption_context_plist_decrypt "libfvde_encryption_context_plist_t *plist" "const uint8_t *key" "size_t key_bit_size" "libfvde_error_t **error"
.Pp
Available when compiled with libbfio support:
.Ft int
.Fn libfvde_encryption_context_plist_read_file_io_handle "libfvde_encryption_context_plist_t *plist" "libbfio_handle_t *file_io_handle" "libfvde_error_t **error"
.Sh DESCRIPTION
The
.Fn libfvde_get_version
function is used to retrieve the library version.
.Sh RETURN VALUES
Most of the functions return NULL or \-1 on error, dependent on the return type.
For the actual return values see "libfvde.h".
.Sh ENVIRONMENT
None
.Sh FILES
None
.Sh NOTES
libfvde can be compiled with wide character support (wchar_t).
.sp
To compile libfvde with wide character support use:
.Ar ./configure --enable-wide-character-type=yes
 or define:
.Ar _UNICODE
 or
.Ar UNICODE
 during compilation.
.sp
.Ar LIBFVDE_WIDE_CHARACTER_TYPE
 in libfvde/features.h can be used to determine if libfvde was compiled with wide character support.
.Sh BUGS
Please report bugs of any kind on the project issue tracker: https://github.com/libyal/libfvde/issues
.Sh AUTHOR
These man pages are generated from "libfvde.h".
.Sh COPYRIGHT
Copyright (C) 2011-2024, Omar Choudary <choudary.omar@gmail.com>, Joachim Metz <joachim.metz@gmail.com>.
.sp
This is free software; see the source for copying conditions.
There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.Sh SEE ALSO
the libfvde.h include file
