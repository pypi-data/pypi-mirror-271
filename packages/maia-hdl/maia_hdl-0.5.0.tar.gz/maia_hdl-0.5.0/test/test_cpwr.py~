#!/usr/bin/env python3

from amaranth import *
import numpy as np

import unittest

from maia_hdl.cmult import Cmult
from .amaranth_sim import AmaranthSim


class TestCmult(AmaranthSim):
    def setUp(self):
        self.width = 16
        self.add_width = 24
        self.add_shift = 8
        self.truncate = 0
        self.add_latency = 0
        self.dut = Cpwr(
            width=self.width, add_width=self.add_width, add_shift=self.add_shift,
            add_latency=self.add_latency, truncate=self.truncate)

    def test_random_inputs(self):
        num_inputs = 1000
        re_a = np.random.randint(-2**(self.width-1), 2**(self.width-1),
                                 size=num_inputs)
        im_a = np.random.randint(-2**(self.width-1), 2**(self.width-1),
                                 size=num_inputs)
        re_b = np.random.randint(-2**(self.width-1), 2**(self.width-1),
                                 size=num_inputs)
        im_b = np.random.randint(-2**(self.width-1), 2**(self.width-1),
                                 size=num_inputs)

        def bench():
            for j in range(num_inputs):
                yield self.dut.clken.eq(1)
                yield self.dut.re_a.eq(int(re_a[j]))
                yield self.dut.im_a.eq(int(im_a[j]))
                yield self.dut.re_b.eq(int(re_b[j]))
                yield self.dut.im_b.eq(int(im_b[j]))
                yield
                if j >= self.dut.delay:
                    out = (
                        (yield self.dut.re_out)
                        + 1j * (yield self.dut.im_out))
                    expected = (
                        (re_a[j-self.dut.delay]
                         + 1j * im_a[j-self.dut.delay])
                        * (re_b[j-self.dut.delay]
                           + 1j * im_b[j-self.dut.delay]))
                    assert out == expected,\
                        f'out = {out}, expected = {expected} @ cycle = {j}'
        self.simulate(bench, 'test_cmult_random_inputs.vcd')


if __name__ == '__main__':
    unittest.main()
