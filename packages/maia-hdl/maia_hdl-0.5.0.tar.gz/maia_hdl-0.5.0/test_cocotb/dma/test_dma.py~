# Copyright (c) 2021 Daniel Estevez <daniel@destevez.net>

import random
import warnings

import cocotb

from cocotb.clock import Clock
from cocotb.triggers import Timer, RisingEdge, ReadOnly, ClockCycles
from cocotb.regression import TestFactory

from cocotb_bus.drivers import BitDriver
from cocotb_bus.scoreboard import Scoreboard

from simplebus import SimpleBusDriver, SimpleBusMonitor

from cocotb_generators.byte import random_data, get_bytes
from cocotb_generators.bit import (
    wave, intermittent_single_cycles, random_50_percent
)


class HalfBufferTB:
    def __init__(self, dut):
        self.dut = dut
        self.input = SimpleBusDriver(dut, 'input', dut.clk)
        self.backpressure = BitDriver(dut.output_ready, dut.clk)
        self.output = SimpleBusMonitor(dut, 'output', self.dut.clk)

        self.expected_output = []
        self.scoreboard = Scoreboard(dut)
        self.scoreboard.add_interface(self.output, self.expected_output)

        self.input_monitor = SimpleBusMonitor(dut, 'input', dut.clk,
                                              callback=self.model)

    def model(self, transaction):
        self.expected_output.append(transaction)


async def run_test(dut, data_in=None, idle_inserter=None,
                   backpressure_inserter=None):
    cocotb.fork(Clock(dut.clk, 10, units='ns').start())
    tb = HalfBufferTB(dut)

    dut.output_ready.value = 1
    dut.input_valid.value = 0
    await ClockCycles(dut.clk, 2)

    if idle_inserter is not None:
        tb.input.set_valid_generator(idle_inserter())
    if backpressure_inserter is not None:
        tb.backpressure.start(backpressure_inserter())

    for transaction in data_in():
        await tb.input.send(transaction, sync=False)

    # Wait at least 2 cycles where output ready is low before ending the test
    for i in range(2):
        await RisingEdge(dut.clk)
        while not dut.output_ready.value:
            await RisingEdge(dut.clk)

    raise tb.scoreboard.result


def random_input(length=100):
    """Generator for random data with infrequent lasts"""
    for _ in range(length):
        data = random.randrange(256)
        # We only generate a last 10 % of the time
        last = random.uniform(0, 1) < 0.1
        yield data, last


factory = TestFactory(run_test)
factory.add_option('data_in', [random_input])
factory.add_option('idle_inserter',
                   [None, wave, intermittent_single_cycles, random_50_percent])
factory.add_option('backpressure_inserter',
                   [None, wave, intermittent_single_cycles, random_50_percent])
factory.generate_tests()
