# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ...core.datetime_utils import serialize_datetime
from ...core.pydantic_utilities import pydantic_v1
from ...entity_types.types.approval_policy_response import ApprovalPolicyResponse
from ...entity_types.types.entity_id import EntityId
from ...entity_types.types.entity_response import EntityResponse
from ...entity_types.types.entity_user_response import EntityUserResponse
from ...payment_method_types.types.currency_code import CurrencyCode
from ...payment_method_types.types.payment_method_id import PaymentMethodId
from ...payment_method_types.types.payment_method_response import PaymentMethodResponse
from .approval_slot import ApprovalSlot
from .comment_response import CommentResponse
from .invoice_failure_type import InvoiceFailureType
from .invoice_fees_response import InvoiceFeesResponse
from .invoice_id import InvoiceId
from .invoice_line_item_response import InvoiceLineItemResponse
from .invoice_status import InvoiceStatus
from .payment_destination_options import PaymentDestinationOptions


class InvoiceResponse(pydantic_v1.BaseModel):
    id: InvoiceId
    status: InvoiceStatus
    amount: typing.Optional[float] = pydantic_v1.Field(default=None)
    """
    Total amount of invoice in major units
    """

    currency: typing.Optional[CurrencyCode] = pydantic_v1.Field(default=None)
    """
    Currency code for the amount. Defaults to USD.
    """

    invoice_date: typing.Optional[dt.datetime] = pydantic_v1.Field(alias="invoiceDate", default=None)
    """
    Date the invoice was issued.
    """

    deduction_date: typing.Optional[dt.datetime] = pydantic_v1.Field(alias="deductionDate", default=None)
    """
    Date when funds will be deducted from payer's account.
    """

    settlement_date: typing.Optional[dt.datetime] = pydantic_v1.Field(alias="settlementDate", default=None)
    """
    Date of funds settlement.
    """

    due_date: typing.Optional[dt.datetime] = pydantic_v1.Field(alias="dueDate", default=None)
    """
    Due date of invoice.
    """

    invoice_number: typing.Optional[str] = pydantic_v1.Field(alias="invoiceNumber", default=None)
    note_to_self: typing.Optional[str] = pydantic_v1.Field(alias="noteToSelf", default=None)
    service_start_date: typing.Optional[dt.datetime] = pydantic_v1.Field(alias="serviceStartDate", default=None)
    service_end_date: typing.Optional[dt.datetime] = pydantic_v1.Field(alias="serviceEndDate", default=None)
    payer_id: typing.Optional[EntityId] = pydantic_v1.Field(alias="payerId", default=None)
    payer: typing.Optional[EntityResponse] = None
    payment_source: typing.Optional[PaymentMethodResponse] = pydantic_v1.Field(alias="paymentSource", default=None)
    payment_source_id: typing.Optional[PaymentMethodId] = pydantic_v1.Field(alias="paymentSourceId", default=None)
    vendor_id: typing.Optional[EntityId] = pydantic_v1.Field(alias="vendorId", default=None)
    vendor: typing.Optional[EntityResponse] = None
    payment_destination: typing.Optional[PaymentMethodResponse] = pydantic_v1.Field(
        alias="paymentDestination", default=None
    )
    payment_destination_id: typing.Optional[PaymentMethodId] = pydantic_v1.Field(
        alias="paymentDestinationId", default=None
    )
    payment_destination_options: typing.Optional[PaymentDestinationOptions] = pydantic_v1.Field(
        alias="paymentDestinationOptions", default=None
    )
    payment_destination_confirmed: bool = pydantic_v1.Field(alias="paymentDestinationConfirmed")
    """
    True if the payment destination has been confirmed by the vendor. False if the payment destination has been set (for example, a check to an address) but has not been confirmed by the vendor.
    """

    has_documents: bool = pydantic_v1.Field(alias="hasDocuments")
    """
    True if the invoice has documents attached.
    """

    has_source_email: bool = pydantic_v1.Field(alias="hasSourceEmail")
    """
    True if the invoice was created by an incoming email.
    """

    comments: typing.Optional[typing.List[CommentResponse]] = None
    line_items: typing.Optional[typing.List[InvoiceLineItemResponse]] = pydantic_v1.Field(
        alias="lineItems", default=None
    )
    approvers: typing.List[ApprovalSlot]
    approval_policy: typing.List[ApprovalPolicyResponse] = pydantic_v1.Field(alias="approvalPolicy")
    metadata: typing.Dict[str, str] = pydantic_v1.Field()
    """
    Metadata associated with this invoice.
    """

    foreign_id: typing.Optional[str] = pydantic_v1.Field(alias="foreignId", default=None)
    """
    The ID used to identify this invoice in your system. This ID must be unique within each creatorEntity in your system, e.g. two invoices with the same creatorEntity may not have the same foreign ID.
    """

    creator_user: typing.Optional[EntityUserResponse] = pydantic_v1.Field(alias="creatorUser", default=None)
    """
    Entity user who created this invoice.
    """

    failure_type: typing.Optional[InvoiceFailureType] = pydantic_v1.Field(alias="failureType", default=None)
    """
    If the invoice failed to be paid, this field will be populated with the type of failure.
    """

    processed_at: typing.Optional[dt.datetime] = pydantic_v1.Field(alias="processedAt", default=None)
    created_at: dt.datetime = pydantic_v1.Field(alias="createdAt")
    updated_at: dt.datetime = pydantic_v1.Field(alias="updatedAt")
    fees: typing.Optional[InvoiceFeesResponse] = pydantic_v1.Field(default=None)
    """
    Fees associated with this invoice.
    """

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        populate_by_name = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
