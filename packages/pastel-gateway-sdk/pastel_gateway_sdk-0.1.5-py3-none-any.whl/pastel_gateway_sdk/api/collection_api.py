# coding: utf-8

"""
    Pastel Network API Gateway

    Pastel Networkâ€™s Gateway provides Web3 developers with easy, robust, and reliable access to the Pastel Network and its underlying protocols via a lightweight, centralized service.<br/> For more information on Pastel Network, review our <a href=https://docs.pastel.network/introduction/pastel-overview>documentation</a>.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import List, Optional, Union
from typing_extensions import Annotated
from pastel_gateway_sdk.models.collection_registration_result import CollectionRegistrationResult

from pastel_gateway_sdk.api_client import ApiClient, RequestSerialized
from pastel_gateway_sdk.api_response import ApiResponse
from pastel_gateway_sdk.rest import RESTResponseType


class CollectionApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_call
    async def collection_create_nft_collection(
        self,
        collection_name: Annotated[Optional[StrictStr],
                                   Field(
                                       description="Collection name")] = None,
        max_collection_entries: Annotated[
            Optional[StrictInt],
            Field(description="Maximum number of items allowed in a collection"
                  )] = None,
        collection_item_copy_count: Annotated[
            Optional[StrictInt],
            Field(description=
                  "Allowed number of copies for all items in a collection"
                  )] = None,
        list_of_pastelids_of_authorized_contributors: Annotated[
            Optional[List[StrictStr]],
            Field(description="List of pastelids of authorized contributors"
                  )] = None,
        max_permitted_open_nsfw_score: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(
                description=
                "Maximum permitted open NSFW score. Where: 0.0 means - 0% chance of NSFW content. 1.0 means - 100% chance of NSFW content"
            )] = None,
        minimum_similarity_score_to_first_entry_in_collection: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(
                description=
                "Minimum similarity score to first entry in collection. Where: 0.0 means - 0% similarity. And 1.0 means - 100% similarity"
            )] = None,
        no_of_days_to_finalize_collection: Annotated[
            Optional[StrictInt],
            Field(description="Number of days to finalize collection")] = None,
        royalty: Annotated[Optional[Union[StrictFloat, StrictInt]],
                           Field(description="Royalty percentage")] = None,
        green: Annotated[Optional[StrictBool],
                         Field(description="Green")] = None,
        _request_timeout: Union[None, Annotated[StrictFloat,
                                                Field(gt=0)],
                                Tuple[Annotated[StrictFloat,
                                                Field(gt=0)],
                                      Annotated[StrictFloat,
                                                Field(gt=0)]]] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CollectionRegistrationResult:
        """Create Nft Collection


        :param collection_name: Collection name
        :type collection_name: str
        :param max_collection_entries: Maximum number of items allowed in a collection
        :type max_collection_entries: int
        :param collection_item_copy_count: Allowed number of copies for all items in a collection
        :type collection_item_copy_count: int
        :param list_of_pastelids_of_authorized_contributors: List of pastelids of authorized contributors
        :type list_of_pastelids_of_authorized_contributors: List[str]
        :param max_permitted_open_nsfw_score: Maximum permitted open NSFW score. Where: 0.0 means - 0% chance of NSFW content. 1.0 means - 100% chance of NSFW content
        :type max_permitted_open_nsfw_score: float
        :param minimum_similarity_score_to_first_entry_in_collection: Minimum similarity score to first entry in collection. Where: 0.0 means - 0% similarity. And 1.0 means - 100% similarity
        :type minimum_similarity_score_to_first_entry_in_collection: float
        :param no_of_days_to_finalize_collection: Number of days to finalize collection
        :type no_of_days_to_finalize_collection: int
        :param royalty: Royalty percentage
        :type royalty: float
        :param green: Green
        :type green: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._collection_create_nft_collection_serialize(
            collection_name=collection_name,
            max_collection_entries=max_collection_entries,
            collection_item_copy_count=collection_item_copy_count,
            list_of_pastelids_of_authorized_contributors=
            list_of_pastelids_of_authorized_contributors,
            max_permitted_open_nsfw_score=max_permitted_open_nsfw_score,
            minimum_similarity_score_to_first_entry_in_collection=
            minimum_similarity_score_to_first_entry_in_collection,
            no_of_days_to_finalize_collection=no_of_days_to_finalize_collection,
            royalty=royalty,
            green=green,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index)

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CollectionRegistrationResult",
            '422': "HTTPValidationError",
        }
        response_data = await self.api_client.call_api(
            *_param, _request_timeout=_request_timeout)
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    async def collection_create_nft_collection_with_http_info(
        self,
        collection_name: Annotated[Optional[StrictStr],
                                   Field(
                                       description="Collection name")] = None,
        max_collection_entries: Annotated[
            Optional[StrictInt],
            Field(description="Maximum number of items allowed in a collection"
                  )] = None,
        collection_item_copy_count: Annotated[
            Optional[StrictInt],
            Field(description=
                  "Allowed number of copies for all items in a collection"
                  )] = None,
        list_of_pastelids_of_authorized_contributors: Annotated[
            Optional[List[StrictStr]],
            Field(description="List of pastelids of authorized contributors"
                  )] = None,
        max_permitted_open_nsfw_score: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(
                description=
                "Maximum permitted open NSFW score. Where: 0.0 means - 0% chance of NSFW content. 1.0 means - 100% chance of NSFW content"
            )] = None,
        minimum_similarity_score_to_first_entry_in_collection: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(
                description=
                "Minimum similarity score to first entry in collection. Where: 0.0 means - 0% similarity. And 1.0 means - 100% similarity"
            )] = None,
        no_of_days_to_finalize_collection: Annotated[
            Optional[StrictInt],
            Field(description="Number of days to finalize collection")] = None,
        royalty: Annotated[Optional[Union[StrictFloat, StrictInt]],
                           Field(description="Royalty percentage")] = None,
        green: Annotated[Optional[StrictBool],
                         Field(description="Green")] = None,
        _request_timeout: Union[None, Annotated[StrictFloat,
                                                Field(gt=0)],
                                Tuple[Annotated[StrictFloat,
                                                Field(gt=0)],
                                      Annotated[StrictFloat,
                                                Field(gt=0)]]] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CollectionRegistrationResult]:
        """Create Nft Collection


        :param collection_name: Collection name
        :type collection_name: str
        :param max_collection_entries: Maximum number of items allowed in a collection
        :type max_collection_entries: int
        :param collection_item_copy_count: Allowed number of copies for all items in a collection
        :type collection_item_copy_count: int
        :param list_of_pastelids_of_authorized_contributors: List of pastelids of authorized contributors
        :type list_of_pastelids_of_authorized_contributors: List[str]
        :param max_permitted_open_nsfw_score: Maximum permitted open NSFW score. Where: 0.0 means - 0% chance of NSFW content. 1.0 means - 100% chance of NSFW content
        :type max_permitted_open_nsfw_score: float
        :param minimum_similarity_score_to_first_entry_in_collection: Minimum similarity score to first entry in collection. Where: 0.0 means - 0% similarity. And 1.0 means - 100% similarity
        :type minimum_similarity_score_to_first_entry_in_collection: float
        :param no_of_days_to_finalize_collection: Number of days to finalize collection
        :type no_of_days_to_finalize_collection: int
        :param royalty: Royalty percentage
        :type royalty: float
        :param green: Green
        :type green: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._collection_create_nft_collection_serialize(
            collection_name=collection_name,
            max_collection_entries=max_collection_entries,
            collection_item_copy_count=collection_item_copy_count,
            list_of_pastelids_of_authorized_contributors=
            list_of_pastelids_of_authorized_contributors,
            max_permitted_open_nsfw_score=max_permitted_open_nsfw_score,
            minimum_similarity_score_to_first_entry_in_collection=
            minimum_similarity_score_to_first_entry_in_collection,
            no_of_days_to_finalize_collection=no_of_days_to_finalize_collection,
            royalty=royalty,
            green=green,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index)

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CollectionRegistrationResult",
            '422': "HTTPValidationError",
        }
        response_data = await self.api_client.call_api(
            *_param, _request_timeout=_request_timeout)
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    async def collection_create_nft_collection_without_preload_content(
        self,
        collection_name: Annotated[Optional[StrictStr],
                                   Field(
                                       description="Collection name")] = None,
        max_collection_entries: Annotated[
            Optional[StrictInt],
            Field(description="Maximum number of items allowed in a collection"
                  )] = None,
        collection_item_copy_count: Annotated[
            Optional[StrictInt],
            Field(description=
                  "Allowed number of copies for all items in a collection"
                  )] = None,
        list_of_pastelids_of_authorized_contributors: Annotated[
            Optional[List[StrictStr]],
            Field(description="List of pastelids of authorized contributors"
                  )] = None,
        max_permitted_open_nsfw_score: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(
                description=
                "Maximum permitted open NSFW score. Where: 0.0 means - 0% chance of NSFW content. 1.0 means - 100% chance of NSFW content"
            )] = None,
        minimum_similarity_score_to_first_entry_in_collection: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(
                description=
                "Minimum similarity score to first entry in collection. Where: 0.0 means - 0% similarity. And 1.0 means - 100% similarity"
            )] = None,
        no_of_days_to_finalize_collection: Annotated[
            Optional[StrictInt],
            Field(description="Number of days to finalize collection")] = None,
        royalty: Annotated[Optional[Union[StrictFloat, StrictInt]],
                           Field(description="Royalty percentage")] = None,
        green: Annotated[Optional[StrictBool],
                         Field(description="Green")] = None,
        _request_timeout: Union[None, Annotated[StrictFloat,
                                                Field(gt=0)],
                                Tuple[Annotated[StrictFloat,
                                                Field(gt=0)],
                                      Annotated[StrictFloat,
                                                Field(gt=0)]]] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Create Nft Collection


        :param collection_name: Collection name
        :type collection_name: str
        :param max_collection_entries: Maximum number of items allowed in a collection
        :type max_collection_entries: int
        :param collection_item_copy_count: Allowed number of copies for all items in a collection
        :type collection_item_copy_count: int
        :param list_of_pastelids_of_authorized_contributors: List of pastelids of authorized contributors
        :type list_of_pastelids_of_authorized_contributors: List[str]
        :param max_permitted_open_nsfw_score: Maximum permitted open NSFW score. Where: 0.0 means - 0% chance of NSFW content. 1.0 means - 100% chance of NSFW content
        :type max_permitted_open_nsfw_score: float
        :param minimum_similarity_score_to_first_entry_in_collection: Minimum similarity score to first entry in collection. Where: 0.0 means - 0% similarity. And 1.0 means - 100% similarity
        :type minimum_similarity_score_to_first_entry_in_collection: float
        :param no_of_days_to_finalize_collection: Number of days to finalize collection
        :type no_of_days_to_finalize_collection: int
        :param royalty: Royalty percentage
        :type royalty: float
        :param green: Green
        :type green: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._collection_create_nft_collection_serialize(
            collection_name=collection_name,
            max_collection_entries=max_collection_entries,
            collection_item_copy_count=collection_item_copy_count,
            list_of_pastelids_of_authorized_contributors=
            list_of_pastelids_of_authorized_contributors,
            max_permitted_open_nsfw_score=max_permitted_open_nsfw_score,
            minimum_similarity_score_to_first_entry_in_collection=
            minimum_similarity_score_to_first_entry_in_collection,
            no_of_days_to_finalize_collection=no_of_days_to_finalize_collection,
            royalty=royalty,
            green=green,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index)

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CollectionRegistrationResult",
            '422': "HTTPValidationError",
        }
        response_data = await self.api_client.call_api(
            *_param, _request_timeout=_request_timeout)
        return response_data.response

    def _collection_create_nft_collection_serialize(
        self,
        collection_name,
        max_collection_entries,
        collection_item_copy_count,
        list_of_pastelids_of_authorized_contributors,
        max_permitted_open_nsfw_score,
        minimum_similarity_score_to_first_entry_in_collection,
        no_of_days_to_finalize_collection,
        royalty,
        green,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'list_of_pastelids_of_authorized_contributors': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if collection_name is not None:

            _query_params.append(('collection_name', collection_name))

        if max_collection_entries is not None:

            _query_params.append(
                ('max_collection_entries', max_collection_entries))

        if collection_item_copy_count is not None:

            _query_params.append(
                ('collection_item_copy_count', collection_item_copy_count))

        if list_of_pastelids_of_authorized_contributors is not None:

            _query_params.append(
                ('list_of_pastelids_of_authorized_contributors',
                 list_of_pastelids_of_authorized_contributors))

        if max_permitted_open_nsfw_score is not None:

            _query_params.append(('max_permitted_open_nsfw_score',
                                  max_permitted_open_nsfw_score))

        if minimum_similarity_score_to_first_entry_in_collection is not None:

            _query_params.append(
                ('minimum_similarity_score_to_first_entry_in_collection',
                 minimum_similarity_score_to_first_entry_in_collection))

        if no_of_days_to_finalize_collection is not None:

            _query_params.append(('no_of_days_to_finalize_collection',
                                  no_of_days_to_finalize_collection))

        if royalty is not None:

            _query_params.append(('royalty', royalty))

        if green is not None:

            _query_params.append(('green', green))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])

        # authentication setting
        _auth_settings: List[str] = ['APIKeyHeader']

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/api/v1/collection/nft',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth)

    @validate_call
    async def collection_create_sense_collection(
        self,
        collection_name: Annotated[Optional[StrictStr],
                                   Field(
                                       description="Collection name")] = None,
        max_collection_entries: Annotated[
            Optional[StrictInt],
            Field(description="Maximum number of items allowed in a collection"
                  )] = None,
        collection_item_copy_count: Annotated[
            Optional[StrictInt],
            Field(description=
                  "Allowed number of copies for all items in a collection"
                  )] = None,
        list_of_pastelids_of_authorized_contributors: Annotated[
            Optional[List[StrictStr]],
            Field(description="List of pastelids of authorized contributors"
                  )] = None,
        max_permitted_open_nsfw_score: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Maximum permitted open NSFW score")] = None,
        minimum_similarity_score_to_first_entry_in_collection: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description=
                  "Minimum similarity score to first entry in collection"
                  )] = None,
        no_of_days_to_finalize_collection: Annotated[
            Optional[StrictInt],
            Field(description="Number of days to finalize collection")] = None,
        royalty: Annotated[Optional[Union[StrictFloat, StrictInt]],
                           Field(description="Royalty percentage")] = None,
        green: Annotated[Optional[StrictBool],
                         Field(description="Green")] = None,
        _request_timeout: Union[None, Annotated[StrictFloat,
                                                Field(gt=0)],
                                Tuple[Annotated[StrictFloat,
                                                Field(gt=0)],
                                      Annotated[StrictFloat,
                                                Field(gt=0)]]] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CollectionRegistrationResult:
        """Create Sense Collection


        :param collection_name: Collection name
        :type collection_name: str
        :param max_collection_entries: Maximum number of items allowed in a collection
        :type max_collection_entries: int
        :param collection_item_copy_count: Allowed number of copies for all items in a collection
        :type collection_item_copy_count: int
        :param list_of_pastelids_of_authorized_contributors: List of pastelids of authorized contributors
        :type list_of_pastelids_of_authorized_contributors: List[str]
        :param max_permitted_open_nsfw_score: Maximum permitted open NSFW score
        :type max_permitted_open_nsfw_score: float
        :param minimum_similarity_score_to_first_entry_in_collection: Minimum similarity score to first entry in collection
        :type minimum_similarity_score_to_first_entry_in_collection: float
        :param no_of_days_to_finalize_collection: Number of days to finalize collection
        :type no_of_days_to_finalize_collection: int
        :param royalty: Royalty percentage
        :type royalty: float
        :param green: Green
        :type green: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._collection_create_sense_collection_serialize(
            collection_name=collection_name,
            max_collection_entries=max_collection_entries,
            collection_item_copy_count=collection_item_copy_count,
            list_of_pastelids_of_authorized_contributors=
            list_of_pastelids_of_authorized_contributors,
            max_permitted_open_nsfw_score=max_permitted_open_nsfw_score,
            minimum_similarity_score_to_first_entry_in_collection=
            minimum_similarity_score_to_first_entry_in_collection,
            no_of_days_to_finalize_collection=no_of_days_to_finalize_collection,
            royalty=royalty,
            green=green,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index)

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CollectionRegistrationResult",
            '422': "HTTPValidationError",
        }
        response_data = await self.api_client.call_api(
            *_param, _request_timeout=_request_timeout)
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    async def collection_create_sense_collection_with_http_info(
        self,
        collection_name: Annotated[Optional[StrictStr],
                                   Field(
                                       description="Collection name")] = None,
        max_collection_entries: Annotated[
            Optional[StrictInt],
            Field(description="Maximum number of items allowed in a collection"
                  )] = None,
        collection_item_copy_count: Annotated[
            Optional[StrictInt],
            Field(description=
                  "Allowed number of copies for all items in a collection"
                  )] = None,
        list_of_pastelids_of_authorized_contributors: Annotated[
            Optional[List[StrictStr]],
            Field(description="List of pastelids of authorized contributors"
                  )] = None,
        max_permitted_open_nsfw_score: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Maximum permitted open NSFW score")] = None,
        minimum_similarity_score_to_first_entry_in_collection: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description=
                  "Minimum similarity score to first entry in collection"
                  )] = None,
        no_of_days_to_finalize_collection: Annotated[
            Optional[StrictInt],
            Field(description="Number of days to finalize collection")] = None,
        royalty: Annotated[Optional[Union[StrictFloat, StrictInt]],
                           Field(description="Royalty percentage")] = None,
        green: Annotated[Optional[StrictBool],
                         Field(description="Green")] = None,
        _request_timeout: Union[None, Annotated[StrictFloat,
                                                Field(gt=0)],
                                Tuple[Annotated[StrictFloat,
                                                Field(gt=0)],
                                      Annotated[StrictFloat,
                                                Field(gt=0)]]] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CollectionRegistrationResult]:
        """Create Sense Collection


        :param collection_name: Collection name
        :type collection_name: str
        :param max_collection_entries: Maximum number of items allowed in a collection
        :type max_collection_entries: int
        :param collection_item_copy_count: Allowed number of copies for all items in a collection
        :type collection_item_copy_count: int
        :param list_of_pastelids_of_authorized_contributors: List of pastelids of authorized contributors
        :type list_of_pastelids_of_authorized_contributors: List[str]
        :param max_permitted_open_nsfw_score: Maximum permitted open NSFW score
        :type max_permitted_open_nsfw_score: float
        :param minimum_similarity_score_to_first_entry_in_collection: Minimum similarity score to first entry in collection
        :type minimum_similarity_score_to_first_entry_in_collection: float
        :param no_of_days_to_finalize_collection: Number of days to finalize collection
        :type no_of_days_to_finalize_collection: int
        :param royalty: Royalty percentage
        :type royalty: float
        :param green: Green
        :type green: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._collection_create_sense_collection_serialize(
            collection_name=collection_name,
            max_collection_entries=max_collection_entries,
            collection_item_copy_count=collection_item_copy_count,
            list_of_pastelids_of_authorized_contributors=
            list_of_pastelids_of_authorized_contributors,
            max_permitted_open_nsfw_score=max_permitted_open_nsfw_score,
            minimum_similarity_score_to_first_entry_in_collection=
            minimum_similarity_score_to_first_entry_in_collection,
            no_of_days_to_finalize_collection=no_of_days_to_finalize_collection,
            royalty=royalty,
            green=green,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index)

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CollectionRegistrationResult",
            '422': "HTTPValidationError",
        }
        response_data = await self.api_client.call_api(
            *_param, _request_timeout=_request_timeout)
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    async def collection_create_sense_collection_without_preload_content(
        self,
        collection_name: Annotated[Optional[StrictStr],
                                   Field(
                                       description="Collection name")] = None,
        max_collection_entries: Annotated[
            Optional[StrictInt],
            Field(description="Maximum number of items allowed in a collection"
                  )] = None,
        collection_item_copy_count: Annotated[
            Optional[StrictInt],
            Field(description=
                  "Allowed number of copies for all items in a collection"
                  )] = None,
        list_of_pastelids_of_authorized_contributors: Annotated[
            Optional[List[StrictStr]],
            Field(description="List of pastelids of authorized contributors"
                  )] = None,
        max_permitted_open_nsfw_score: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Maximum permitted open NSFW score")] = None,
        minimum_similarity_score_to_first_entry_in_collection: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description=
                  "Minimum similarity score to first entry in collection"
                  )] = None,
        no_of_days_to_finalize_collection: Annotated[
            Optional[StrictInt],
            Field(description="Number of days to finalize collection")] = None,
        royalty: Annotated[Optional[Union[StrictFloat, StrictInt]],
                           Field(description="Royalty percentage")] = None,
        green: Annotated[Optional[StrictBool],
                         Field(description="Green")] = None,
        _request_timeout: Union[None, Annotated[StrictFloat,
                                                Field(gt=0)],
                                Tuple[Annotated[StrictFloat,
                                                Field(gt=0)],
                                      Annotated[StrictFloat,
                                                Field(gt=0)]]] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Create Sense Collection


        :param collection_name: Collection name
        :type collection_name: str
        :param max_collection_entries: Maximum number of items allowed in a collection
        :type max_collection_entries: int
        :param collection_item_copy_count: Allowed number of copies for all items in a collection
        :type collection_item_copy_count: int
        :param list_of_pastelids_of_authorized_contributors: List of pastelids of authorized contributors
        :type list_of_pastelids_of_authorized_contributors: List[str]
        :param max_permitted_open_nsfw_score: Maximum permitted open NSFW score
        :type max_permitted_open_nsfw_score: float
        :param minimum_similarity_score_to_first_entry_in_collection: Minimum similarity score to first entry in collection
        :type minimum_similarity_score_to_first_entry_in_collection: float
        :param no_of_days_to_finalize_collection: Number of days to finalize collection
        :type no_of_days_to_finalize_collection: int
        :param royalty: Royalty percentage
        :type royalty: float
        :param green: Green
        :type green: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._collection_create_sense_collection_serialize(
            collection_name=collection_name,
            max_collection_entries=max_collection_entries,
            collection_item_copy_count=collection_item_copy_count,
            list_of_pastelids_of_authorized_contributors=
            list_of_pastelids_of_authorized_contributors,
            max_permitted_open_nsfw_score=max_permitted_open_nsfw_score,
            minimum_similarity_score_to_first_entry_in_collection=
            minimum_similarity_score_to_first_entry_in_collection,
            no_of_days_to_finalize_collection=no_of_days_to_finalize_collection,
            royalty=royalty,
            green=green,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index)

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CollectionRegistrationResult",
            '422': "HTTPValidationError",
        }
        response_data = await self.api_client.call_api(
            *_param, _request_timeout=_request_timeout)
        return response_data.response

    def _collection_create_sense_collection_serialize(
        self,
        collection_name,
        max_collection_entries,
        collection_item_copy_count,
        list_of_pastelids_of_authorized_contributors,
        max_permitted_open_nsfw_score,
        minimum_similarity_score_to_first_entry_in_collection,
        no_of_days_to_finalize_collection,
        royalty,
        green,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'list_of_pastelids_of_authorized_contributors': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if collection_name is not None:

            _query_params.append(('collection_name', collection_name))

        if max_collection_entries is not None:

            _query_params.append(
                ('max_collection_entries', max_collection_entries))

        if collection_item_copy_count is not None:

            _query_params.append(
                ('collection_item_copy_count', collection_item_copy_count))

        if list_of_pastelids_of_authorized_contributors is not None:

            _query_params.append(
                ('list_of_pastelids_of_authorized_contributors',
                 list_of_pastelids_of_authorized_contributors))

        if max_permitted_open_nsfw_score is not None:

            _query_params.append(('max_permitted_open_nsfw_score',
                                  max_permitted_open_nsfw_score))

        if minimum_similarity_score_to_first_entry_in_collection is not None:

            _query_params.append(
                ('minimum_similarity_score_to_first_entry_in_collection',
                 minimum_similarity_score_to_first_entry_in_collection))

        if no_of_days_to_finalize_collection is not None:

            _query_params.append(('no_of_days_to_finalize_collection',
                                  no_of_days_to_finalize_collection))

        if royalty is not None:

            _query_params.append(('royalty', royalty))

        if green is not None:

            _query_params.append(('green', green))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])

        # authentication setting
        _auth_settings: List[str] = ['APIKeyHeader']

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/api/v1/collection/sense',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth)

    @validate_call
    async def collection_get_all_nft_collections(
        self,
        _request_timeout: Union[None, Annotated[StrictFloat,
                                                Field(gt=0)],
                                Tuple[Annotated[StrictFloat,
                                                Field(gt=0)],
                                      Annotated[StrictFloat,
                                                Field(gt=0)]]] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[CollectionRegistrationResult]:
        """Get All Nft Collections


        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._collection_get_all_nft_collections_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index)

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[CollectionRegistrationResult]",
        }
        response_data = await self.api_client.call_api(
            *_param, _request_timeout=_request_timeout)
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    async def collection_get_all_nft_collections_with_http_info(
        self,
        _request_timeout: Union[None, Annotated[StrictFloat,
                                                Field(gt=0)],
                                Tuple[Annotated[StrictFloat,
                                                Field(gt=0)],
                                      Annotated[StrictFloat,
                                                Field(gt=0)]]] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[CollectionRegistrationResult]]:
        """Get All Nft Collections


        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._collection_get_all_nft_collections_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index)

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[CollectionRegistrationResult]",
        }
        response_data = await self.api_client.call_api(
            *_param, _request_timeout=_request_timeout)
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    async def collection_get_all_nft_collections_without_preload_content(
        self,
        _request_timeout: Union[None, Annotated[StrictFloat,
                                                Field(gt=0)],
                                Tuple[Annotated[StrictFloat,
                                                Field(gt=0)],
                                      Annotated[StrictFloat,
                                                Field(gt=0)]]] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get All Nft Collections


        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._collection_get_all_nft_collections_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index)

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[CollectionRegistrationResult]",
        }
        response_data = await self.api_client.call_api(
            *_param, _request_timeout=_request_timeout)
        return response_data.response

    def _collection_get_all_nft_collections_serialize(
        self,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])

        # authentication setting
        _auth_settings: List[str] = ['APIKeyHeader']

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/collection/nft/collections',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth)

    @validate_call
    async def collection_get_all_sense_collections(
        self,
        _request_timeout: Union[None, Annotated[StrictFloat,
                                                Field(gt=0)],
                                Tuple[Annotated[StrictFloat,
                                                Field(gt=0)],
                                      Annotated[StrictFloat,
                                                Field(gt=0)]]] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[CollectionRegistrationResult]:
        """Get All Sense Collections


        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._collection_get_all_sense_collections_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index)

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[CollectionRegistrationResult]",
        }
        response_data = await self.api_client.call_api(
            *_param, _request_timeout=_request_timeout)
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    async def collection_get_all_sense_collections_with_http_info(
        self,
        _request_timeout: Union[None, Annotated[StrictFloat,
                                                Field(gt=0)],
                                Tuple[Annotated[StrictFloat,
                                                Field(gt=0)],
                                      Annotated[StrictFloat,
                                                Field(gt=0)]]] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[CollectionRegistrationResult]]:
        """Get All Sense Collections


        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._collection_get_all_sense_collections_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index)

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[CollectionRegistrationResult]",
        }
        response_data = await self.api_client.call_api(
            *_param, _request_timeout=_request_timeout)
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    async def collection_get_all_sense_collections_without_preload_content(
        self,
        _request_timeout: Union[None, Annotated[StrictFloat,
                                                Field(gt=0)],
                                Tuple[Annotated[StrictFloat,
                                                Field(gt=0)],
                                      Annotated[StrictFloat,
                                                Field(gt=0)]]] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get All Sense Collections


        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._collection_get_all_sense_collections_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index)

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[CollectionRegistrationResult]",
        }
        response_data = await self.api_client.call_api(
            *_param, _request_timeout=_request_timeout)
        return response_data.response

    def _collection_get_all_sense_collections_serialize(
        self,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])

        # authentication setting
        _auth_settings: List[str] = ['APIKeyHeader']

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/collection/sense/collections',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth)

    @validate_call
    async def collection_get_nft_collections_from_collection_id(
        self,
        collection_id: StrictStr,
        _request_timeout: Union[None, Annotated[StrictFloat,
                                                Field(gt=0)],
                                Tuple[Annotated[StrictFloat,
                                                Field(gt=0)],
                                      Annotated[StrictFloat,
                                                Field(gt=0)]]] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CollectionRegistrationResult:
        """Get Nft Collections From Collection Id


        :param collection_id: (required)
        :type collection_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._collection_get_nft_collections_from_collection_id_serialize(
            collection_id=collection_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index)

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CollectionRegistrationResult",
            '422': "HTTPValidationError",
        }
        response_data = await self.api_client.call_api(
            *_param, _request_timeout=_request_timeout)
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    async def collection_get_nft_collections_from_collection_id_with_http_info(
        self,
        collection_id: StrictStr,
        _request_timeout: Union[None, Annotated[StrictFloat,
                                                Field(gt=0)],
                                Tuple[Annotated[StrictFloat,
                                                Field(gt=0)],
                                      Annotated[StrictFloat,
                                                Field(gt=0)]]] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CollectionRegistrationResult]:
        """Get Nft Collections From Collection Id


        :param collection_id: (required)
        :type collection_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._collection_get_nft_collections_from_collection_id_serialize(
            collection_id=collection_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index)

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CollectionRegistrationResult",
            '422': "HTTPValidationError",
        }
        response_data = await self.api_client.call_api(
            *_param, _request_timeout=_request_timeout)
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    async def collection_get_nft_collections_from_collection_id_without_preload_content(
        self,
        collection_id: StrictStr,
        _request_timeout: Union[None, Annotated[StrictFloat,
                                                Field(gt=0)],
                                Tuple[Annotated[StrictFloat,
                                                Field(gt=0)],
                                      Annotated[StrictFloat,
                                                Field(gt=0)]]] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get Nft Collections From Collection Id


        :param collection_id: (required)
        :type collection_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._collection_get_nft_collections_from_collection_id_serialize(
            collection_id=collection_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index)

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CollectionRegistrationResult",
            '422': "HTTPValidationError",
        }
        response_data = await self.api_client.call_api(
            *_param, _request_timeout=_request_timeout)
        return response_data.response

    def _collection_get_nft_collections_from_collection_id_serialize(
        self,
        collection_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if collection_id is not None:
            _path_params['collection_id'] = collection_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])

        # authentication setting
        _auth_settings: List[str] = ['APIKeyHeader']

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/collection/nft/collections/{collection_id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth)

    @validate_call
    async def collection_get_sense_collections_from_collection_id(
        self,
        collection_id: StrictStr,
        _request_timeout: Union[None, Annotated[StrictFloat,
                                                Field(gt=0)],
                                Tuple[Annotated[StrictFloat,
                                                Field(gt=0)],
                                      Annotated[StrictFloat,
                                                Field(gt=0)]]] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CollectionRegistrationResult:
        """Get Sense Collections From Collection Id


        :param collection_id: (required)
        :type collection_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._collection_get_sense_collections_from_collection_id_serialize(
            collection_id=collection_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index)

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CollectionRegistrationResult",
            '422': "HTTPValidationError",
        }
        response_data = await self.api_client.call_api(
            *_param, _request_timeout=_request_timeout)
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    async def collection_get_sense_collections_from_collection_id_with_http_info(
        self,
        collection_id: StrictStr,
        _request_timeout: Union[None, Annotated[StrictFloat,
                                                Field(gt=0)],
                                Tuple[Annotated[StrictFloat,
                                                Field(gt=0)],
                                      Annotated[StrictFloat,
                                                Field(gt=0)]]] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CollectionRegistrationResult]:
        """Get Sense Collections From Collection Id


        :param collection_id: (required)
        :type collection_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._collection_get_sense_collections_from_collection_id_serialize(
            collection_id=collection_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index)

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CollectionRegistrationResult",
            '422': "HTTPValidationError",
        }
        response_data = await self.api_client.call_api(
            *_param, _request_timeout=_request_timeout)
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    async def collection_get_sense_collections_from_collection_id_without_preload_content(
        self,
        collection_id: StrictStr,
        _request_timeout: Union[None, Annotated[StrictFloat,
                                                Field(gt=0)],
                                Tuple[Annotated[StrictFloat,
                                                Field(gt=0)],
                                      Annotated[StrictFloat,
                                                Field(gt=0)]]] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get Sense Collections From Collection Id


        :param collection_id: (required)
        :type collection_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._collection_get_sense_collections_from_collection_id_serialize(
            collection_id=collection_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index)

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CollectionRegistrationResult",
            '422': "HTTPValidationError",
        }
        response_data = await self.api_client.call_api(
            *_param, _request_timeout=_request_timeout)
        return response_data.response

    def _collection_get_sense_collections_from_collection_id_serialize(
        self,
        collection_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if collection_id is not None:
            _path_params['collection_id'] = collection_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])

        # authentication setting
        _auth_settings: List[str] = ['APIKeyHeader']

        return self.api_client.param_serialize(
            method='GET',
            resource_path=
            '/api/v1/collection/sense/collections/{collection_id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth)
