# coding: utf-8

"""
    Pastel Network API Gateway

    Pastel Networkâ€™s Gateway provides Web3 developers with easy, robust, and reliable access to the Pastel Network and its underlying protocols via a lightweight, centralized service.<br/> For more information on Pastel Network, review our <a href=https://docs.pastel.network/introduction/pastel-overview>documentation</a>.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self


class ApiKeyCreate(BaseModel):
    """
    ApiKeyCreate
    """

  # noqa: E501
    can_nft: Optional[StrictBool] = None
    can_sense: Optional[StrictBool] = None
    can_cascade: Optional[StrictBool] = None
    __properties: ClassVar[List[str]] = ["can_nft", "can_sense", "can_cascade"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ApiKeyCreate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if can_nft (nullable) is None
        # and model_fields_set contains the field
        if self.can_nft is None and "can_nft" in self.model_fields_set:
            _dict['can_nft'] = None

        # set to None if can_sense (nullable) is None
        # and model_fields_set contains the field
        if self.can_sense is None and "can_sense" in self.model_fields_set:
            _dict['can_sense'] = None

        # set to None if can_cascade (nullable) is None
        # and model_fields_set contains the field
        if self.can_cascade is None and "can_cascade" in self.model_fields_set:
            _dict['can_cascade'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ApiKeyCreate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "can_nft": obj.get("can_nft"),
            "can_sense": obj.get("can_sense"),
            "can_cascade": obj.get("can_cascade")
        })
        return _obj
