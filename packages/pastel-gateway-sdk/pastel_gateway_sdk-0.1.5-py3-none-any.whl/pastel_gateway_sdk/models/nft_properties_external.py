# coding: utf-8

"""
    Pastel Network API Gateway

    Pastel Networkâ€™s Gateway provides Web3 developers with easy, robust, and reliable access to the Pastel Network and its underlying protocols via a lightweight, centralized service.<br/> For more information on Pastel Network, review our <a href=https://docs.pastel.network/introduction/pastel-overview>documentation</a>.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self


class NftPropertiesExternal(BaseModel):
    """
    NftPropertiesExternal
    """

  # noqa: E501
    creator_name: Optional[StrictStr] = None
    creator_website_url: Optional[StrictStr] = None
    description: Optional[StrictStr] = None
    green: Optional[StrictBool] = None
    issued_copies: Optional[StrictInt] = None
    keywords: Optional[StrictStr] = None
    maximum_fee: Optional[Union[StrictFloat, StrictInt]] = None
    name: Optional[StrictStr] = None
    royalty: Optional[Union[StrictFloat, StrictInt]] = None
    series_name: Optional[StrictStr] = None
    youtube_url: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = [
        "creator_name", "creator_website_url", "description", "green",
        "issued_copies", "keywords", "maximum_fee", "name", "royalty",
        "series_name", "youtube_url"
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NftPropertiesExternal from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if creator_name (nullable) is None
        # and model_fields_set contains the field
        if self.creator_name is None and "creator_name" in self.model_fields_set:
            _dict['creator_name'] = None

        # set to None if creator_website_url (nullable) is None
        # and model_fields_set contains the field
        if self.creator_website_url is None and "creator_website_url" in self.model_fields_set:
            _dict['creator_website_url'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if green (nullable) is None
        # and model_fields_set contains the field
        if self.green is None and "green" in self.model_fields_set:
            _dict['green'] = None

        # set to None if issued_copies (nullable) is None
        # and model_fields_set contains the field
        if self.issued_copies is None and "issued_copies" in self.model_fields_set:
            _dict['issued_copies'] = None

        # set to None if keywords (nullable) is None
        # and model_fields_set contains the field
        if self.keywords is None and "keywords" in self.model_fields_set:
            _dict['keywords'] = None

        # set to None if maximum_fee (nullable) is None
        # and model_fields_set contains the field
        if self.maximum_fee is None and "maximum_fee" in self.model_fields_set:
            _dict['maximum_fee'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if royalty (nullable) is None
        # and model_fields_set contains the field
        if self.royalty is None and "royalty" in self.model_fields_set:
            _dict['royalty'] = None

        # set to None if series_name (nullable) is None
        # and model_fields_set contains the field
        if self.series_name is None and "series_name" in self.model_fields_set:
            _dict['series_name'] = None

        # set to None if youtube_url (nullable) is None
        # and model_fields_set contains the field
        if self.youtube_url is None and "youtube_url" in self.model_fields_set:
            _dict['youtube_url'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NftPropertiesExternal from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "creator_name":
            obj.get("creator_name"),
            "creator_website_url":
            obj.get("creator_website_url"),
            "description":
            obj.get("description"),
            "green":
            obj.get("green"),
            "issued_copies":
            obj.get("issued_copies"),
            "keywords":
            obj.get("keywords"),
            "maximum_fee":
            obj.get("maximum_fee"),
            "name":
            obj.get("name"),
            "royalty":
            obj.get("royalty"),
            "series_name":
            obj.get("series_name"),
            "youtube_url":
            obj.get("youtube_url")
        })
        return _obj
