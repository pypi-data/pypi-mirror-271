Metadata-Version: 2.1
Name: qdtrader
Version: 0.0.1
Summary: QuantDo Trader SDK for quants
Author-email: Fisher Yu <yuzs@quantdo.com.cn>
License: MIT License
        
        Copyright (c) 2022 quantease
        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
        
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Requires-Python: >=3.7
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: chinese_calendar>=1.9.0
Requires-Dist: Cython>=0.29.33
Requires-Dist: ctpwrapper>=6.6.9
Requires-Dist: Flask>=1.1.1
Requires-Dist: Flask_Bootstrap>=3.3.7.1
Requires-Dist: Flask_Compress>=1.12
Requires-Dist: matplotlib>=3.1.0
Requires-Dist: nest_asyncio>=1.5.5
Requires-Dist: numpy>=1.19.2
Requires-Dist: pandas>=1.3.5
Requires-Dist: python_dateutil>=2.8.2
Requires-Dist: qdsdk>=0.03
Requires-Dist: quantstats>=0.0.59
Requires-Dist: redis>=4.3.4
Requires-Dist: scipy>=1.7.3
Requires-Dist: passlib>=1.7.4

# qdtrader交易接口



## 简介

qdtrader交易接口可以通过pip直接安装在用户本地，实现在任意python环境下进行策略开发、回测、模拟交易和实盘交易。



## 安装说明

首先，您的系统上必须已经安装了python环境（版本3.7或以上），推荐使用anaconda3. 然后，就可以按照如下步骤安装了。

- ### windows环境

  - 安装Microsoft C++ Build Tools

    下载链接：

    [Microsoft C++ Build Toosl]: https://visualstudio.microsoft.com/visual-cpp-build-tools/

    > 注：该工具版本号需要在14以上

  - 安装Redis-server数据库服务

    可以使用我们提供的安装配套的redis-server服务。下载链接：

    [installRedis.exe]: https://quantease.cn/downloads/qeserver/installRedis.exe

    下载后运行该工具即可

    > qdtrader使用的Redis端口号是6379。若需要修改为其他端口号，需要在qdtrader安装完毕后修改qdtrader的配置

  - 安装qdtrader

    ```bash
    pip install -U qdtrader --timeout=60
    ```

    > 注： 若要加快安装速度，可以使用国内镜像站点

- ### linux环境配置

  - 安装Redis

    linux下安装Redis最简单快捷的方式是使用Docker安装

    首先用docker pull 下载redis最新版本

    ```
    sudo docker pull redis
    ```

    然后启动redis容器

    ```
    sudo docker run -itd --name redis-server -p 6379:6379 redis
    ```

  - 安装qdtrader

    ```bash
    pip install -U qdtrader --timeout=60
    ```

    > 注： 若要加快安装速度，可以使用国内镜像站点

## 使用说明

- ### 启动网页服务

  - 写一个python文件命名为runWeb.py

    ```python
    from qdtrader.qeweb import runWebpage
    runWebpage()
    ```

    

  - 在Anaconda的命令行环境下进入runWeb.py所在目录，并运行如下命令

    ```bash
    python runWeb.py
    ```

    运行后web网页服务将启动，用户可以实时查看订单委托，成交，持仓，权益和日志信息，并可以观察行情图。

    按键Ctrl+C或者关闭窗口可以终止该服务，网页将无法查看，重新运行上述命令后可恢复。

    

- ### 编写策略文件并运行

  - 如下是一个python策略文件范例

    ```python
    import qdsdk
    from datetime import datetime,timedelta
    from qdtrader import *
    qdsdk.auth('Your username','Your authcode')
    user_setting = {'investorid':'000000', 'password':'XXXXXXXXXXXXXX','broker':'simnow'}
    user = 'myname'
    
    def getLastToken(user):
        acclist = listSimuAccounts(user)
        if len(acclist)>0:
            return acclist[-1]
        else:
            return  createSimuAccount(user, initCap=10000000)
    
    class mystrat(qeStratBase):
        
        def __init__(self):
            self.instid=['AG2306.SFE']
            self.datamode='minute'
            self.freq = 1
            
        def crossDay(self,context):
            pass
        def onBar(self,context):
            print(get_bar(context,1))
            
        def handleData(self,context):
            pass
    
    
    if __name__=='__main__':
        strat1 = mystrat()
        token_code = getLastToken(user)
        runStrat(user,'real', [strat1], simu_token=token_code, real_account=user_setting)
    
    ```

    > 注：
    >
    > 1.auth语句中授权码需要在https://quantease.cn上注册登录后点击主页右上角菜单'授权码'获取。
    >
    > 2.user_setting中账户信息需要换成您自己的账户信息
    >
    > 3.运行后复制给出的网页链接在浏览器中查看运行结果即可

  

- ### 修改系统配置

  - 获取系统配置

    ```python
    from qdtrader import read_sysconfig
    read_sysconfig()
    ```

    获取结果为

    ```
    {'redis': {'host': '127.0.0.1', 'port': 6379, 'password': ''}, 'webpage': {'host': '127.0.0.1', 'port': 5814}}
    ```

    

  - 修改Redis配置

    接口函数为

    ```python
    setRedisConfig(host='127.0.0.1', port=6379, password='')
    ```

    根据您本地Redis-server配置修改该接口，使得qdtrader可以访问您的本地数据库。

    比如您本地Redis端口号为6380， 那么可以这么运行

    ```python
    from qdtrader import setRedisConfig
    setRedisConfig(port=6380)
    
    ```

    恢复默认出厂设置仅需要调用不带参数的setRedisConfig即可

    ```python
    from qdtrader import setRedisConfig
    setRedisConfig()
    ```

    

  - 修改网页配置

    接口函数为

    ```python
    setWebConfig(host='127.0.0.1',port=5814)
    ```

    如果qdtrader网页服务默认端口号5814和您本地端口冲突，您可以修改为其他端口号，比如修改为5008。

    ```python
    from qdtrader import setWebConfig
    setWebConfig(port=5008)
    ```

    恢复默认出厂设置仅需要调用不带参数的setWebConfig即可

    ```
    from qdtrader import setWebConfig
    setWebConfig()
    ```

    

    在浏览器测试一下输入网址http://127.0.0.1:5814, 出现如下文字代表启动成功

    ```
    qdtrader网页展示服务已经成功启动
    ```

    

## 		

## 如何编写策略

参照[官方文档](http://doc.quantdo.com.cn/helpbook?authcode=8%2B4wHJbzPBV0Ad%2F9N0iDlZwJQTo%3D)文档说明



## 插件使用说明

### 安装

以“algoex“插件为例，下载插件代码如下：

```python
from qdsdk import auth
auth('your username','your authcode')
from qdtrader.qeplugins import installPlugin
installPlugin('algoex')
```

运行代码后，出现如下提示代表安装成功：

```
插件algoex下载成功
在策略文件中按如下格式import该插件:
from qdtrader.plugins.qealgoex import plugin_algoex
```

> 注;下载插件需要成为VIP付费客户，否则会下载失败。注册VIP请联系客服

### 引用插件

以'algoex'为例，根据按照的说明，在code中使用：

```python
from qdsdk import auth
##授权码
auth('your username','your authcode')
from qdtrader import listSimuAccounts, createSimuAccount,runStrat
from qdtrader.plugins.qealgoex import plugin_algoex 

##实盘账户信息
user_setting = {'investorid':'xxxxxx', 'password':'xxxxxxxx','broker':'xxxxxx'}

if __name__=='__main__':
    ##换成自己的用户名
    user='myname'
    ##如果有模拟账户，用第一个账户，没有新建一个
    tokenlist = listSimuAccounts(user)
    if len(tokenlist) > 0:
        token = tokenlist[0]
    else:
        token = createSimuAccount(user)
    ##运行策略，algoex插件本身就是个策略实例，可以直接使用
    runStrat(user,'real',[plugin_algoex], simu_token=token,real_account=user_setting)

```

