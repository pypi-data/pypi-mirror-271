[build-system]
build-backend = "hatchling.build"
requires = ["hatchling"]

[project]
name = "release_by_changelog"
version = "0.2.0"
authors = [
    {email = "releasebychangelog.rjsts@simplelogin.com", name = "Dorian Turba"},
]
description = "Release a new version of a software based on CHANGELOG.md file."
readme = "README.md"
requires-python = ">=3.11"
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Development Status :: 3 - Alpha",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Typing :: Typed",
]
dependencies = [
    "python-gitlab",
    "typer[all]",
]

[project.scripts]
release_by_changelog = "release_by_changelog:app"

[project.urls]
"Bug Tracker" = "https://lab.frogg.it/swepy/release-by-changelog/-/issues"
"Homepage" = "https://lab.frogg.it/swepy/release-by-changelog"

[project.optional-dependencies]
ALL = ["release_by_changelog[DEV,QUALITY,TEST]"]
DEV = [
    "bump-my-version",
    "pip-tools",
]
QUALITY = [
    "pre-commit",
    "ruff>=0.3.3",
    "toml-sort",
    "pyright",
]
TEST = [
    "pytest",
    "coverage",
    "pytest-mock",
]

[tool.pytest.ini_options]
addopts = "-rA -q"
minversion = "6.0"
testpaths = [
    "tests",
    "integration",
]

[tool.bumpversion]
allow-dirty = true
commit = false
config-file = "pyproject.toml"
current_version = "0.2.0"
parse = "(?P<major>\\d+)\\.(?P<minor>\\d+)\\.(?P<patch>\\d+)"
replace = "{new_version}"
search = "{current_version}"
serialize = [
    "{major}.{minor}.{patch}",
]
tag = false

[[tool.bumpversion.files]]
allow-dirty = true
filename = "pyproject.toml"
replace = "version = \"{new_version}\""
search = "version = \"{current_version}\""

[[tool.bumpversion.files]]
allow-dirty = true
filename = "CHANGELOG.md"
replace = """## [Unreleased]

[![Pipeline](https://lab.frogg.it/swepy/release-by-changelog/badges/trunk/pipeline.svg)](https://lab.frogg.it/swepy/release-by-changelog/-/pipelines?ref=trunk)

## [{new_version}] - {now:%Y-%m-%d}

[![Pipeline](https://lab.frogg.it/swepy/release-by-changelog/badges/{new_version}/pipeline.svg)](https://lab.frogg.it/swepy/release-by-changelog/-/pipelines?ref={new_version})
"""
search = """## [Unreleased]

[![Pipeline](https://lab.frogg.it/swepy/release-by-changelog/badges/trunk/pipeline.svg)](https://lab.frogg.it/swepy/release-by-changelog/-/pipelines?ref=trunk)
"""

[tool.mypy]
disallow_untyped_defs = true
packages = "release_by_changelog"
python_version = ">=3.8"

[tool.hatch.envs.default.scripts]
all-requirements = [
    "requirements",
    "dev-requirements",
    "quality-requirements",
    "test-requirements",
]
bump-major = "bump-my-version bump major"
bump-minor = "bump-my-version bump minor"
bump-patch = "bump-my-version bump patch"
dev-requirements = "pip-compile --extra=dev --allow-unsafe --output-file=requirements/dev.txt --strip-extras pyproject.toml"
format = "ruff format ."
format-check = "ruff format . --check"
format-diff = "ruff format . --diff"
install = [
    "pip-upgrade",
    "pip install -e . --upgrade",
]
lint = "ruff check ."
lint-fix = "ruff check . --fix"
lint-ufix = "ruff check . --fix --unsafe-fixes"
pip-upgrade = "pip install --upgrade pip"
pre-commit-install = "pre-commit install"
pre-commit-run = "pre-commit run --all-files"
pre-commit-update = "pre-commit autoupdate"
pre-push-run = "pre-commit run --all-files --hook-stage pre-push"
quality-requirements = "pip-compile --extra=quality --allow-unsafe --output-file=requirements/quality.txt --strip-extras pyproject.toml"
requirements = "pip-compile --allow-unsafe --output-file=requirements/prod.txt --strip-extras pyproject.toml"
test-requirements = "pip-compile --extra=test --allow-unsafe --output-file=requirements/test.txt --strip-extras pyproject.toml"
toml = "toml-sort --in-place pyproject.toml"

[tool.hatch.metadata]
allow-direct-references = false

[tool.pip-tools]
allow-unsafe = true
annotate = true
generate_hashes = false
quiet = true
strip-extras = true
upgrade = true

[tool.ruff]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "pypackages",
    "venv",
]
indent-width = 4
line-length = 88
target-version = "py38"

[tool.ruff.format]
docstring-code-format = true
docstring-code-line-length = "dynamic"

[tool.ruff.lint]
select = ["ANN", "C90", "D2", "D3", "D4", "E", "F", "I", "N", "RUF", "UP", "W"]

[tool.ruff.lint.flake8-annotations]
suppress-dummy-args = true

[tool.ruff.lint.pydocstyle]
convention = "pep257"
ignore-decorators = ["typing.overload"]

[tool.tomlsort]
check = false
ignore_case = true
in_place = true
no_block_comments = true
no_comments = true
no_footer_comments = true
no_header_comments = true
no_inline_comments = true
no_sort_tables = true
sort_inline_arrays = false
sort_inline_tables = true
sort_table_keys = true
spaces_before_inline_comment = 2
spaces_indent_inline_array = 4
trailing_comma_inline_array = true

[tool.tomlsort.overrides."project"]
table_keys = false

[tool.tox]
legacy_tox_ini = """
    [tox]
    min_version = 4.0
    env_list =
        py{311,312}
    isolated_build = true

    [testenv]
    deps = pytest
    commands = pytest
"""
