# This workflow will upload a Python Package using Twine when a release is created
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python#publishing-to-package-registries

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Upload Python Package

# BE VERY CAREFUL when editing the trigger conditions in this section!
# if your configuration is invalid, the workflow will automatically trigger
# on EVERY COMMIT
on: 
  # trigger on published release
  release: 
      types: [published]
  # or when the workflow is run manually from the Actions page
  workflow_dispatch:

permissions:
  # we need to read the repository to check out a copy of the code
  contents: read
  # and mint an ID token to use trusted publishing to PyPI
  id-token: write

jobs:
  # the "deploy" job is our only job
  deploy:

    runs-on: ubuntu-latest

    steps:
    # check out the project code from the main branch
    - uses: actions/checkout@v4
    # install Python 3.11
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.11'
    # install the requirements from requirements.txt
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    # build the package
    - name: Build package
      run: python -m build
    # then upload to PyPI
    # this step will fail unless you have configured trusted publishing
    # on the PyPI side
    - name: Publish package
      uses: pypa/gh-action-pypi-publish@release/v1
    # comment this back in to upload to the test server
    # BUT NOTE that packages on the test server are
    # STILL PUBLICLY AVAILABLE
    #  with:
    #    repository-url: https://test.pypi.org/legacy/
