# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing
import urllib.parse
from json.decoder import JSONDecodeError

from ..core.api_error import ApiError
from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.datetime_utils import serialize_datetime
from ..core.jsonable_encoder import jsonable_encoder
from ..core.pydantic_utilities import pydantic_v1
from ..core.remove_none_from_dict import remove_none_from_dict
from ..core.request_options import RequestOptions
from ..errors.errors.object_not_found_error import ObjectNotFoundError
from ..errors.types.object_not_found_body import ObjectNotFoundBody
from .types.annotation import Annotation
from .types.paginated_annotations import PaginatedAnnotations


class AnnotationsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def get_annotation(
        self, annotation_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> Annotation:
        """
        Parameters
        ----------
        annotation_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Annotation

        Examples
        --------
        from sphinxbio.client import Sphinxbio

        client = Sphinxbio(
            username="YOUR_USERNAME",
            password="YOUR_PASSWORD",
        )
        client.annotations.get_annotation(
            annotation_id="hit_asd3b18",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            method="GET",
            url=urllib.parse.urljoin(
                f"{self._client_wrapper.get_base_url()}/", f"v1/annotations/{jsonable_encoder(annotation_id)}"
            ),
            params=jsonable_encoder(
                request_options.get("additional_query_parameters") if request_options is not None else None
            ),
            headers=jsonable_encoder(
                remove_none_from_dict(
                    {
                        **self._client_wrapper.get_headers(),
                        **(request_options.get("additional_headers", {}) if request_options is not None else {}),
                    }
                )
            ),
            timeout=request_options.get("timeout_in_seconds")
            if request_options is not None and request_options.get("timeout_in_seconds") is not None
            else self._client_wrapper.get_timeout(),
            retries=0,
            max_retries=request_options.get("max_retries") if request_options is not None else 0,  # type: ignore
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(Annotation, _response_json)  # type: ignore
        if "error" in _response_json:
            if _response_json["error"] == "ObjectNotFoundError":
                raise ObjectNotFoundError(
                    pydantic_v1.parse_obj_as(ObjectNotFoundBody, _response_json["content"])  # type: ignore
                )
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def list_annotations(
        self,
        *,
        limit: typing.Optional[int] = None,
        sort: typing.Optional[str] = None,
        created_gt: typing.Optional[dt.datetime] = None,
        created_lt: typing.Optional[dt.datetime] = None,
        updated_gt: typing.Optional[dt.datetime] = None,
        updated_lt: typing.Optional[dt.datetime] = None,
        next_token: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PaginatedAnnotations:
        """
        Parameters
        ----------
        limit : typing.Optional[int]
            The maximum number of workflows to return. Defaults to 50. Minimum is 1. Maximum is 100.

        sort : typing.Optional[str]
            Sort the workflows by created or updated. Defaults to 'created_desc'. Possible values are created_asc, updated_asc, updated_desc.

        created_gt : typing.Optional[dt.datetime]
            Greater than filter for created timestamp. Format is ISO 8601.

        created_lt : typing.Optional[dt.datetime]
            Less than filter for created timestamp. Format is ISO 8601.

        updated_gt : typing.Optional[dt.datetime]
            Greater than filter for updated timestamp. Format is ISO 8601.

        updated_lt : typing.Optional[dt.datetime]
            Less than filter for updated timestamp. Format is ISO 8601.

        next_token : typing.Optional[str]
            The next pagination token.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PaginatedAnnotations

        Examples
        --------
        from sphinxbio.client import Sphinxbio

        client = Sphinxbio(
            username="YOUR_USERNAME",
            password="YOUR_PASSWORD",
        )
        client.annotations.list_annotations()
        """
        _response = self._client_wrapper.httpx_client.request(
            method="GET",
            url=urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "v1/annotations"),
            params=jsonable_encoder(
                remove_none_from_dict(
                    {
                        "limit": limit,
                        "sort": sort,
                        "created.gt": serialize_datetime(created_gt) if created_gt is not None else None,
                        "created.lt": serialize_datetime(created_lt) if created_lt is not None else None,
                        "updated.gt": serialize_datetime(updated_gt) if updated_gt is not None else None,
                        "updated.lt": serialize_datetime(updated_lt) if updated_lt is not None else None,
                        "nextToken": next_token,
                        **(
                            request_options.get("additional_query_parameters", {})
                            if request_options is not None
                            else {}
                        ),
                    }
                )
            ),
            headers=jsonable_encoder(
                remove_none_from_dict(
                    {
                        **self._client_wrapper.get_headers(),
                        **(request_options.get("additional_headers", {}) if request_options is not None else {}),
                    }
                )
            ),
            timeout=request_options.get("timeout_in_seconds")
            if request_options is not None and request_options.get("timeout_in_seconds") is not None
            else self._client_wrapper.get_timeout(),
            retries=0,
            max_retries=request_options.get("max_retries") if request_options is not None else 0,  # type: ignore
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(PaginatedAnnotations, _response_json)  # type: ignore
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncAnnotationsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def get_annotation(
        self, annotation_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> Annotation:
        """
        Parameters
        ----------
        annotation_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Annotation

        Examples
        --------
        from sphinxbio.client import AsyncSphinxbio

        client = AsyncSphinxbio(
            username="YOUR_USERNAME",
            password="YOUR_PASSWORD",
        )
        await client.annotations.get_annotation(
            annotation_id="hit_asd3b18",
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            method="GET",
            url=urllib.parse.urljoin(
                f"{self._client_wrapper.get_base_url()}/", f"v1/annotations/{jsonable_encoder(annotation_id)}"
            ),
            params=jsonable_encoder(
                request_options.get("additional_query_parameters") if request_options is not None else None
            ),
            headers=jsonable_encoder(
                remove_none_from_dict(
                    {
                        **self._client_wrapper.get_headers(),
                        **(request_options.get("additional_headers", {}) if request_options is not None else {}),
                    }
                )
            ),
            timeout=request_options.get("timeout_in_seconds")
            if request_options is not None and request_options.get("timeout_in_seconds") is not None
            else self._client_wrapper.get_timeout(),
            retries=0,
            max_retries=request_options.get("max_retries") if request_options is not None else 0,  # type: ignore
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(Annotation, _response_json)  # type: ignore
        if "error" in _response_json:
            if _response_json["error"] == "ObjectNotFoundError":
                raise ObjectNotFoundError(
                    pydantic_v1.parse_obj_as(ObjectNotFoundBody, _response_json["content"])  # type: ignore
                )
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def list_annotations(
        self,
        *,
        limit: typing.Optional[int] = None,
        sort: typing.Optional[str] = None,
        created_gt: typing.Optional[dt.datetime] = None,
        created_lt: typing.Optional[dt.datetime] = None,
        updated_gt: typing.Optional[dt.datetime] = None,
        updated_lt: typing.Optional[dt.datetime] = None,
        next_token: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PaginatedAnnotations:
        """
        Parameters
        ----------
        limit : typing.Optional[int]
            The maximum number of workflows to return. Defaults to 50. Minimum is 1. Maximum is 100.

        sort : typing.Optional[str]
            Sort the workflows by created or updated. Defaults to 'created_desc'. Possible values are created_asc, updated_asc, updated_desc.

        created_gt : typing.Optional[dt.datetime]
            Greater than filter for created timestamp. Format is ISO 8601.

        created_lt : typing.Optional[dt.datetime]
            Less than filter for created timestamp. Format is ISO 8601.

        updated_gt : typing.Optional[dt.datetime]
            Greater than filter for updated timestamp. Format is ISO 8601.

        updated_lt : typing.Optional[dt.datetime]
            Less than filter for updated timestamp. Format is ISO 8601.

        next_token : typing.Optional[str]
            The next pagination token.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PaginatedAnnotations

        Examples
        --------
        from sphinxbio.client import AsyncSphinxbio

        client = AsyncSphinxbio(
            username="YOUR_USERNAME",
            password="YOUR_PASSWORD",
        )
        await client.annotations.list_annotations()
        """
        _response = await self._client_wrapper.httpx_client.request(
            method="GET",
            url=urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "v1/annotations"),
            params=jsonable_encoder(
                remove_none_from_dict(
                    {
                        "limit": limit,
                        "sort": sort,
                        "created.gt": serialize_datetime(created_gt) if created_gt is not None else None,
                        "created.lt": serialize_datetime(created_lt) if created_lt is not None else None,
                        "updated.gt": serialize_datetime(updated_gt) if updated_gt is not None else None,
                        "updated.lt": serialize_datetime(updated_lt) if updated_lt is not None else None,
                        "nextToken": next_token,
                        **(
                            request_options.get("additional_query_parameters", {})
                            if request_options is not None
                            else {}
                        ),
                    }
                )
            ),
            headers=jsonable_encoder(
                remove_none_from_dict(
                    {
                        **self._client_wrapper.get_headers(),
                        **(request_options.get("additional_headers", {}) if request_options is not None else {}),
                    }
                )
            ),
            timeout=request_options.get("timeout_in_seconds")
            if request_options is not None and request_options.get("timeout_in_seconds") is not None
            else self._client_wrapper.get_timeout(),
            retries=0,
            max_retries=request_options.get("max_retries") if request_options is not None else 0,  # type: ignore
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(PaginatedAnnotations, _response_json)  # type: ignore
        raise ApiError(status_code=_response.status_code, body=_response_json)
