import time

from starlette.middleware.base import BaseHTTPMiddleware

from .logger import JacobsAmazingLogger as TGCLogger
from .logger import setup_custom_logger as TGCLoggerSetup


class TimingMiddleware(BaseHTTPMiddleware):
    """
    Middleware for measuring and logging the time taken for each request.

    This middleware calculates the duration of each HTTP request and logs it
    using a custom logger. It's useful for monitoring and performance analysis.

    Attributes:
        logger (TGCLogger): A logger instance to log timing information.

    Args:
        app: The Starlette/FastAPI application instance to which this middleware is applied.
    """

    def __init__(self, app):
        """
        Initialize the middleware with the application instance.

        Args:
            app: The application instance to which this middleware is attached.
        """
        super().__init__(app)
        self.logger = TGCLoggerSetup(
            __name__, level="DEBUG", logger=TGCLogger(__name__)
        )

    async def dispatch(self, request, call_next):
        """
        Process each request, measure its processing time, and log the duration.

        This method is an asynchronous coroutine. It records the start time of a request,
        awaits its completion, and then logs the time taken to process the request.

        Args:
            request: The incoming HTTP request.
            call_next: A callable that proceeds to the next middleware or actual request handler.

        Returns:
            Response: The HTTP response generated by handling the request.
        """
        start_time = time.time()
        response = await call_next(request)
        process_time = time.time() - start_time
        self.logger.timespec(
            f"Request to {request.url.path} took {process_time:.2f} seconds"
        )
        return response


def log_time(start_time, end_time, message=None):
    """
    Log the time duration between two time points with an optional message.

    This function calculates the duration between `start_time` and `end_time`
    and logs it with an optional message for context.

    Args:
        start_time (float): The start time in seconds.
        end_time (float): The end time in seconds.
        message (str, optional): An optional message to include in the log. Defaults to None.
    """
    duration = end_time - start_time
    logger = TGCLoggerSetup(__name__, level="DEBUG", logger=TGCLogger(__name__))
    logger.timespec(f"{message}: {duration:.2f} seconds")
