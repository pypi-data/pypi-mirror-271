(function(u,s){typeof exports=="object"&&typeof module<"u"?s(exports,require("vue")):typeof define=="function"&&define.amd?define(["exports","vue"],s):(u=typeof globalThis<"u"?globalThis:u||self,s(u.trame_vtklocal={},u.Vue))})(this,function(u,s){"use strict";async function W(r,c){const d={canvas:r,locateFile(){return c},print(){console.info(Array.prototype.slice.call(arguments).join(" "))},printErr(){console.error(Array.prototype.slice.call(arguments).join(" "))}},p=await window.createVTKWasmSceneManager(d);return p.initialize(),p}const k={VtkLocal:{emits:["updated","memory-vtk","memory-arrays"],props:{renderWindow:{type:Number},eagerSync:{type:Boolean,default:!1},cacheSize:{type:Number,default:1e8},wsClient:{type:Object}},setup(r,{emit:c}){const d=s.inject("trame"),p=d.state.get("__trame_vtklocal_wasm_url"),T=s.ref(null),v=s.ref(null),y=r.wsClient||(d==null?void 0:d.client),S={},g={},M={},m=s.ref(1);let o=null,w=0,b=null;function E([e]){if(e.type==="state"){const{mtime:i,content:n,id:t}=e;o.unRegisterState(t),o.registerState(n),S[t]=i}if(e.type==="blob"){const{hash:i,content:n}=e;M[i]=new Promise(t=>{n.arrayBuffer?n.arrayBuffer().then(a=>{o.registerBlob(i,new Uint8Array(a)),t()}):(o.registerBlob(i,n),t())})}}async function U(){const e=y.getConnection().getSession();b=e.subscribe("vtklocal.subscriptions",E),await e.call("vtklocal.subscribe.update",[r.renderWindow,1])}async function C(){const e=y.getConnection().getSession();b&&(e.unsubscribe(b),b=null),await e.call("vtklocal.subscribe.update",[r.renderWindow,-1])}function O(){const{width:e,height:i}=T.value.getBoundingClientRect(),n=Math.floor(e*window.devicePixelRatio+.5),t=Math.floor(i*window.devicePixelRatio+.5),a=s.unref(v);a&&o&&r.renderWindow&&(a.width=n,a.height=t,o.setSize(r.renderWindow,n,t),o.render(r.renderWindow))}let h=new ResizeObserver(O);async function z(e){const n=await y.getConnection().getSession().call("vtklocal.get.state",[e]);return n.length>0?(S[e]=JSON.parse(n).MTime,o.unRegisterState(e),o.registerState(n)):console.log(`Server returned empty state for ${e}`),n}async function A(e){if(M[e]){await M[e],g[e]=s.unref(m),delete M[e];return}const n=await y.getConnection().getSession().call("vtklocal.get.hash",[e]),t=n.arrayBuffer?new Uint8Array(await n.arrayBuffer()):n;return o.registerBlob(e,t),g[e]=s.unref(m),t}function V(){const e=o.getTotalVTKDataObjectMemoryUsage(),i=o.getTotalBlobMemoryUsage(),n=Number(r.cacheSize)+e;if(i>n){const t={};let a=s.unref(m);for(Object.entries(g).forEach(([f,l])=>{l<a&&(a=l);const j=l.toString();t[j]?t[j].push(f):t[j]=[f]});o.getTotalBlobMemoryUsage()>n;){const f=t[a];if(f)for(let l=0;l<f.length;l++)o.unRegisterBlob(f[l]),delete g[f[l]];a++}}c("memory-vtk",o.getTotalVTKDataObjectMemoryUsage()),c("memory-arrays",o.getTotalBlobMemoryUsage())}async function B(){if(w++,w===1)try{const i=await y.getConnection().getSession().call("vtklocal.get.status",[r.renderWindow]),n=[];i.ids.forEach(([t,a])=>{(!S[t]||S[t]<a)&&n.push(z(t))}),i.ignore_ids.forEach(t=>{o.unRegisterState(t)}),i.hashes.forEach(t=>{g[t]||n.push(A(t)),g[t]=s.unref(m)}),await Promise.all(n),m.value++;try{o.updateObjectsFromStates(),O()}catch(t){console.error("WASM update failed"),console.log(t)}c("updated"),V()}catch(e){console.error("Error in update",e)}finally{w--,w&&(w=0,await B())}}return s.onMounted(async()=>{o=await W(s.unref(v),p),r.eagerSync&&U(),await B(),o.startEventLoop(r.renderWindow),h&&h.observe(s.unref(T))}),s.onBeforeUnmount(()=>{b&&C(),o.stopEventLoop(r.renderWindow),h&&(h.disconnect(),h=null)}),{container:T,canvas:v,update:B}},template:`
        <div ref="container" style="position: relative; width: 100%; height: 100%;">
          <canvas 
            id="canvas"
            ref="canvas" 
            style="position: absolute; left: 0; top: 0; width: 100%; height: 100%;" 
            tabindex="0"
            
            @contextmenu.prevent
            @click="canvas.focus()"
            @mouseenter="canvas.focus()"
          />
        </div>`}};function R(r){Object.keys(k).forEach(c=>{r.component(c,k[c])})}u.install=R,Object.defineProperty(u,Symbol.toStringTag,{value:"Module"})});
